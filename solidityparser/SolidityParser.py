# Generated from Solidity.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0087")
        buf.write("\u046d\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\7\2\u00ce\n\2\f\2\16\2\u00d1\13\2\3\2\3\2\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\4\3\4\3\5\3\5\5\5\u00de\n\5\3\6\3\6\5\6")
        buf.write("\u00e2\n\6\3\6\7\6\u00e5\n\6\f\6\16\6\u00e8\13\6\3\7\3")
        buf.write("\7\3\b\5\b\u00ed\n\b\3\b\3\b\5\b\u00f1\n\b\3\b\5\b\u00f4")
        buf.write("\n\b\3\t\3\t\3\t\5\t\u00f9\n\t\3\n\3\n\3\n\3\n\5\n\u00ff")
        buf.write("\n\n\3\n\3\n\3\n\3\n\3\n\5\n\u0106\n\n\3\n\3\n\5\n\u010a")
        buf.write("\n\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\7\n\u0115\n\n")
        buf.write("\f\n\16\n\u0118\13\n\3\n\3\n\3\n\3\n\3\n\5\n\u011f\n\n")
        buf.write("\3\13\3\13\3\f\5\f\u0124\n\f\3\f\3\f\3\f\3\f\3\f\3\f\7")
        buf.write("\f\u012c\n\f\f\f\16\f\u012f\13\f\5\f\u0131\n\f\3\f\3\f")
        buf.write("\7\f\u0135\n\f\f\f\16\f\u0138\13\f\3\f\3\f\3\r\3\r\3\r")
        buf.write("\5\r\u013f\n\r\3\r\5\r\u0142\n\r\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\5\16\u014d\n\16\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\7\17\u0156\n\17\f\17\16\17\u0159")
        buf.write("\13\17\3\17\3\17\3\17\5\17\u015e\n\17\3\17\3\17\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23")
        buf.write("\5\23\u0179\n\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\3\24\7\24\u0185\n\24\f\24\16\24\u0188\13\24\5")
        buf.write("\24\u018a\n\24\3\24\3\24\3\25\3\25\3\25\5\25\u0191\n\25")
        buf.write("\3\25\3\25\7\25\u0195\n\25\f\25\16\25\u0198\13\25\3\25")
        buf.write("\3\25\5\25\u019c\n\25\3\26\3\26\3\26\5\26\u01a1\n\26\3")
        buf.write("\26\5\26\u01a4\n\26\3\27\3\27\3\27\3\27\5\27\u01aa\n\27")
        buf.write("\3\27\3\27\5\27\u01ae\n\27\3\30\3\30\5\30\u01b2\n\30\3")
        buf.write("\30\3\30\3\30\5\30\u01b7\n\30\3\31\3\31\3\31\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\7\32\u01c4\n\32\f\32\16")
        buf.write("\32\u01c7\13\32\3\33\3\33\3\33\3\33\5\33\u01cd\n\33\3")
        buf.write("\33\3\33\3\34\3\34\3\35\3\35\3\35\3\35\5\35\u01d7\n\35")
        buf.write("\3\35\3\35\7\35\u01db\n\35\f\35\16\35\u01de\13\35\3\35")
        buf.write("\3\35\3\36\3\36\3\36\3\36\7\36\u01e6\n\36\f\36\16\36\u01e9")
        buf.write("\13\36\5\36\u01eb\n\36\3\36\3\36\3\37\3\37\5\37\u01f1")
        buf.write("\n\37\3\37\5\37\u01f4\n\37\3 \3 \3 \3 \7 \u01fa\n \f ")
        buf.write("\16 \u01fd\13 \5 \u01ff\n \3 \3 \3!\3!\5!\u0205\n!\3!")
        buf.write("\5!\u0208\n!\3\"\3\"\3\"\3\"\7\"\u020e\n\"\f\"\16\"\u0211")
        buf.write("\13\"\5\"\u0213\n\"\3\"\3\"\3#\3#\5#\u0219\n#\3$\3$\5")
        buf.write("$\u021d\n$\3$\3$\3%\3%\3%\3%\3%\3%\3%\5%\u0228\n%\3%\3")
        buf.write("%\3%\5%\u022d\n%\3%\7%\u0230\n%\f%\16%\u0233\13%\3&\3")
        buf.write("&\3&\7&\u0238\n&\f&\16&\u023b\13&\3\'\3\'\5\'\u023f\n")
        buf.write("\'\3(\3(\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\7)\u024d\n)\f)")
        buf.write("\16)\u0250\13)\3)\3)\5)\u0254\n)\3*\3*\3+\3+\3,\3,\7,")
        buf.write("\u025c\n,\f,\16,\u025f\13,\3,\3,\3-\3-\3-\3-\3-\3-\3-")
        buf.write("\3-\3-\3-\3-\3-\3-\3-\3-\5-\u0272\n-\3.\3.\3.\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\5/\u027e\n/\3\60\3\60\3\60\5\60\u0283\n")
        buf.write("\60\3\60\3\60\6\60\u0287\n\60\r\60\16\60\u0288\3\61\3")
        buf.write("\61\5\61\u028d\n\61\3\61\5\61\u0290\n\61\3\61\3\61\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\63\3\63\5\63\u029c\n\63\3")
        buf.write("\64\3\64\3\64\3\65\3\65\3\65\3\65\5\65\u02a5\n\65\3\65")
        buf.write("\3\65\5\65\u02a9\n\65\3\65\5\65\u02ac\n\65\3\65\3\65\3")
        buf.write("\65\3\66\3\66\5\66\u02b3\n\66\3\66\3\66\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\38\38\38\39\39\39\3:\3:\5:\u02c7")
        buf.write("\n:\3:\3:\3;\3;\3;\3<\3<\3<\3<\3=\3=\3=\3=\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\5>\u02dd\n>\3>\3>\5>\u02e1\n>\3>\3>\3?\5?\u02e6")
        buf.write("\n?\3?\3?\5?\u02ea\n?\7?\u02ec\n?\f?\16?\u02ef\13?\3@")
        buf.write("\3@\5@\u02f3\n@\3@\7@\u02f6\n@\f@\16@\u02f9\13@\3@\5@")
        buf.write("\u02fc\n@\3@\3@\3A\3A\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\5B\u0314\nB\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u034a\nB\3B\3B\5B\u034e")
        buf.write("\nB\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\7B\u035e")
        buf.write("\nB\fB\16B\u0361\13B\3C\3C\3C\3C\3C\3C\3C\5C\u036a\nC")
        buf.write("\3C\3C\3C\3C\3C\3C\5C\u0372\nC\5C\u0374\nC\3D\3D\3D\7")
        buf.write("D\u0379\nD\fD\16D\u037c\13D\3E\3E\3E\7E\u0381\nE\fE\16")
        buf.write("E\u0384\13E\3E\5E\u0387\nE\3F\3F\3F\3F\3G\3G\5G\u038f")
        buf.write("\nG\3G\3G\5G\u0393\nG\5G\u0395\nG\3H\3H\3H\3H\3H\3I\3")
        buf.write("I\7I\u039e\nI\fI\16I\u03a1\13I\3I\3I\3J\3J\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u03b7\nJ\3K\3")
        buf.write("K\3K\5K\u03bc\nK\3L\3L\3L\3L\3M\3M\3M\3M\5M\u03c6\nM\3")
        buf.write("M\3M\5M\u03ca\nM\3M\3M\7M\u03ce\nM\fM\16M\u03d1\13M\3")
        buf.write("M\5M\u03d4\nM\3N\3N\3N\3N\5N\u03da\nN\3O\3O\3O\3O\3P\3")
        buf.write("P\3P\3P\3P\3P\5P\u03e6\nP\3Q\3Q\3Q\7Q\u03eb\nQ\fQ\16Q")
        buf.write("\u03ee\13Q\3R\3R\3R\3S\3S\3S\3T\3T\3T\7T\u03f9\nT\fT\16")
        buf.write("T\u03fc\13T\3U\3U\3U\3U\3U\3U\5U\u0404\nU\3V\3V\3V\3V")
        buf.write("\5V\u040a\nV\3V\3V\5V\u040e\nV\3V\3V\3W\3W\3W\3X\3X\3")
        buf.write("X\5X\u0418\nX\3X\3X\3X\5X\u041d\nX\3X\3X\3Y\3Y\3Y\3Y\3")
        buf.write("Z\3Z\3Z\3Z\5Z\u0429\nZ\3[\3[\3[\3[\3\\\3\\\5\\\u0431\n")
        buf.write("\\\3\\\3\\\5\\\u0435\n\\\7\\\u0437\n\\\f\\\16\\\u043a")
        buf.write("\13\\\3\\\3\\\3\\\3\\\3\\\7\\\u0441\n\\\f\\\16\\\u0444")
        buf.write("\13\\\5\\\u0446\n\\\3\\\5\\\u0449\n\\\3]\3]\5]\u044d\n")
        buf.write("]\3^\3^\5^\u0451\n^\3_\3_\3`\6`\u0456\n`\r`\16`\u0457")
        buf.write("\3a\3a\3a\3a\3a\7a\u045f\na\fa\16a\u0462\13a\3a\3a\5a")
        buf.write("\u0466\na\3b\6b\u0469\nb\rb\16b\u046a\3b\2\4H\u0082c\2")
        buf.write("\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64")
        buf.write("\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\2\21\3\2\6\f\3\2\25\27\3\2*,")
        buf.write("\6\2qqxx||~~\5\2&&9<dh\3\2=>\3\2AB\3\2CD\4\2\17\17GH\3")
        buf.write("\2IJ\3\2\b\13\3\2MN\4\2\f\fQZ\3\2jk\13\2\20\20\33\33,")
        buf.write(",88bbttxx\177\177\u0081\u0082\2\u04ea\2\u00cf\3\2\2\2")
        buf.write("\4\u00d4\3\2\2\2\6\u00d9\3\2\2\2\b\u00dd\3\2\2\2\n\u00df")
        buf.write("\3\2\2\2\f\u00e9\3\2\2\2\16\u00f3\3\2\2\2\20\u00f5\3\2")
        buf.write("\2\2\22\u011e\3\2\2\2\24\u0120\3\2\2\2\26\u0123\3\2\2")
        buf.write("\2\30\u013b\3\2\2\2\32\u014c\3\2\2\2\34\u014e\3\2\2\2")
        buf.write("\36\u0161\3\2\2\2 \u0168\3\2\2\2\"\u016d\3\2\2\2$\u0173")
        buf.write("\3\2\2\2&\u017c\3\2\2\2(\u018d\3\2\2\2*\u019d\3\2\2\2")
        buf.write(",\u01a5\3\2\2\2.\u01b6\3\2\2\2\60\u01b8\3\2\2\2\62\u01c5")
        buf.write("\3\2\2\2\64\u01c8\3\2\2\2\66\u01d0\3\2\2\28\u01d2\3\2")
        buf.write("\2\2:\u01e1\3\2\2\2<\u01ee\3\2\2\2>\u01f5\3\2\2\2@\u0202")
        buf.write("\3\2\2\2B\u0209\3\2\2\2D\u0216\3\2\2\2F\u021a\3\2\2\2")
        buf.write("H\u0227\3\2\2\2J\u0234\3\2\2\2L\u023e\3\2\2\2N\u0240\3")
        buf.write("\2\2\2P\u0247\3\2\2\2R\u0255\3\2\2\2T\u0257\3\2\2\2V\u0259")
        buf.write("\3\2\2\2X\u0271\3\2\2\2Z\u0273\3\2\2\2\\\u0276\3\2\2\2")
        buf.write("^\u027f\3\2\2\2`\u028a\3\2\2\2b\u0293\3\2\2\2d\u029b\3")
        buf.write("\2\2\2f\u029d\3\2\2\2h\u02a0\3\2\2\2j\u02b0\3\2\2\2l\u02b6")
        buf.write("\3\2\2\2n\u02be\3\2\2\2p\u02c1\3\2\2\2r\u02c4\3\2\2\2")
        buf.write("t\u02ca\3\2\2\2v\u02cd\3\2\2\2x\u02d1\3\2\2\2z\u02dc\3")
        buf.write("\2\2\2|\u02e5\3\2\2\2~\u02f0\3\2\2\2\u0080\u02ff\3\2\2")
        buf.write("\2\u0082\u0313\3\2\2\2\u0084\u0373\3\2\2\2\u0086\u0375")
        buf.write("\3\2\2\2\u0088\u037d\3\2\2\2\u008a\u0388\3\2\2\2\u008c")
        buf.write("\u0394\3\2\2\2\u008e\u0396\3\2\2\2\u0090\u039b\3\2\2\2")
        buf.write("\u0092\u03b6\3\2\2\2\u0094\u03bb\3\2\2\2\u0096\u03bd\3")
        buf.write("\2\2\2\u0098\u03c5\3\2\2\2\u009a\u03d5\3\2\2\2\u009c\u03db")
        buf.write("\3\2\2\2\u009e\u03e5\3\2\2\2\u00a0\u03e7\3\2\2\2\u00a2")
        buf.write("\u03ef\3\2\2\2\u00a4\u03f2\3\2\2\2\u00a6\u03f5\3\2\2\2")
        buf.write("\u00a8\u0403\3\2\2\2\u00aa\u0405\3\2\2\2\u00ac\u0411\3")
        buf.write("\2\2\2\u00ae\u0414\3\2\2\2\u00b0\u0420\3\2\2\2\u00b2\u0428")
        buf.write("\3\2\2\2\u00b4\u042a\3\2\2\2\u00b6\u0448\3\2\2\2\u00b8")
        buf.write("\u044c\3\2\2\2\u00ba\u044e\3\2\2\2\u00bc\u0452\3\2\2\2")
        buf.write("\u00be\u0455\3\2\2\2\u00c0\u0459\3\2\2\2\u00c2\u0468\3")
        buf.write("\2\2\2\u00c4\u00ce\5\4\3\2\u00c5\u00ce\5\22\n\2\u00c6")
        buf.write("\u00ce\5\26\f\2\u00c7\u00ce\58\35\2\u00c8\u00ce\5&\24")
        buf.write("\2\u00c9\u00ce\5,\27\2\u00ca\u00ce\5\36\20\2\u00cb\u00ce")
        buf.write("\5 \21\2\u00cc\u00ce\5\"\22\2\u00cd\u00c4\3\2\2\2\u00cd")
        buf.write("\u00c5\3\2\2\2\u00cd\u00c6\3\2\2\2\u00cd\u00c7\3\2\2\2")
        buf.write("\u00cd\u00c8\3\2\2\2\u00cd\u00c9\3\2\2\2\u00cd\u00ca\3")
        buf.write("\2\2\2\u00cd\u00cb\3\2\2\2\u00cd\u00cc\3\2\2\2\u00ce\u00d1")
        buf.write("\3\2\2\2\u00cf\u00cd\3\2\2\2\u00cf\u00d0\3\2\2\2\u00d0")
        buf.write("\u00d2\3\2\2\2\u00d1\u00cf\3\2\2\2\u00d2\u00d3\7\2\2\3")
        buf.write("\u00d3\3\3\2\2\2\u00d4\u00d5\7\3\2\2\u00d5\u00d6\5\6\4")
        buf.write("\2\u00d6\u00d7\5\b\5\2\u00d7\u00d8\7\4\2\2\u00d8\5\3\2")
        buf.write("\2\2\u00d9\u00da\5\u00bc_\2\u00da\7\3\2\2\2\u00db\u00de")
        buf.write("\5\n\6\2\u00dc\u00de\5\u0082B\2\u00dd\u00db\3\2\2\2\u00dd")
        buf.write("\u00dc\3\2\2\2\u00de\t\3\2\2\2\u00df\u00e6\5\16\b\2\u00e0")
        buf.write("\u00e2\7\5\2\2\u00e1\u00e0\3\2\2\2\u00e1\u00e2\3\2\2\2")
        buf.write("\u00e2\u00e3\3\2\2\2\u00e3\u00e5\5\16\b\2\u00e4\u00e1")
        buf.write("\3\2\2\2\u00e5\u00e8\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e6")
        buf.write("\u00e7\3\2\2\2\u00e7\13\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e9")
        buf.write("\u00ea\t\2\2\2\u00ea\r\3\2\2\2\u00eb\u00ed\5\f\7\2\u00ec")
        buf.write("\u00eb\3\2\2\2\u00ec\u00ed\3\2\2\2\u00ed\u00ee\3\2\2\2")
        buf.write("\u00ee\u00f4\7\u0084\2\2\u00ef\u00f1\5\f\7\2\u00f0\u00ef")
        buf.write("\3\2\2\2\u00f0\u00f1\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2")
        buf.write("\u00f4\7j\2\2\u00f3\u00ec\3\2\2\2\u00f3\u00f0\3\2\2\2")
        buf.write("\u00f4\17\3\2\2\2\u00f5\u00f8\5\u00bc_\2\u00f6\u00f7\7")
        buf.write("\r\2\2\u00f7\u00f9\5\u00bc_\2\u00f8\u00f6\3\2\2\2\u00f8")
        buf.write("\u00f9\3\2\2\2\u00f9\21\3\2\2\2\u00fa\u00fb\7\16\2\2\u00fb")
        buf.write("\u00fe\5\24\13\2\u00fc\u00fd\7\r\2\2\u00fd\u00ff\5\u00bc")
        buf.write("_\2\u00fe\u00fc\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u0100")
        buf.write("\3\2\2\2\u0100\u0101\7\4\2\2\u0101\u011f\3\2\2\2\u0102")
        buf.write("\u0105\7\16\2\2\u0103\u0106\7\17\2\2\u0104\u0106\5\u00bc")
        buf.write("_\2\u0105\u0103\3\2\2\2\u0105\u0104\3\2\2\2\u0106\u0109")
        buf.write("\3\2\2\2\u0107\u0108\7\r\2\2\u0108\u010a\5\u00bc_\2\u0109")
        buf.write("\u0107\3\2\2\2\u0109\u010a\3\2\2\2\u010a\u010b\3\2\2\2")
        buf.write("\u010b\u010c\7\20\2\2\u010c\u010d\5\24\13\2\u010d\u010e")
        buf.write("\7\4\2\2\u010e\u011f\3\2\2\2\u010f\u0110\7\16\2\2\u0110")
        buf.write("\u0111\7\21\2\2\u0111\u0116\5\20\t\2\u0112\u0113\7\22")
        buf.write("\2\2\u0113\u0115\5\20\t\2\u0114\u0112\3\2\2\2\u0115\u0118")
        buf.write("\3\2\2\2\u0116\u0114\3\2\2\2\u0116\u0117\3\2\2\2\u0117")
        buf.write("\u0119\3\2\2\2\u0118\u0116\3\2\2\2\u0119\u011a\7\23\2")
        buf.write("\2\u011a\u011b\7\20\2\2\u011b\u011c\5\24\13\2\u011c\u011d")
        buf.write("\7\4\2\2\u011d\u011f\3\2\2\2\u011e\u00fa\3\2\2\2\u011e")
        buf.write("\u0102\3\2\2\2\u011e\u010f\3\2\2\2\u011f\23\3\2\2\2\u0120")
        buf.write("\u0121\7\u0083\2\2\u0121\25\3\2\2\2\u0122\u0124\7\24\2")
        buf.write("\2\u0123\u0122\3\2\2\2\u0123\u0124\3\2\2\2\u0124\u0125")
        buf.write("\3\2\2\2\u0125\u0126\t\3\2\2\u0126\u0130\5\u00bc_\2\u0127")
        buf.write("\u0128\7\30\2\2\u0128\u012d\5\30\r\2\u0129\u012a\7\22")
        buf.write("\2\2\u012a\u012c\5\30\r\2\u012b\u0129\3\2\2\2\u012c\u012f")
        buf.write("\3\2\2\2\u012d\u012b\3\2\2\2\u012d\u012e\3\2\2\2\u012e")
        buf.write("\u0131\3\2\2\2\u012f\u012d\3\2\2\2\u0130\u0127\3\2\2\2")
        buf.write("\u0130\u0131\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0136\7")
        buf.write("\21\2\2\u0133\u0135\5\32\16\2\u0134\u0133\3\2\2\2\u0135")
        buf.write("\u0138\3\2\2\2\u0136\u0134\3\2\2\2\u0136\u0137\3\2\2\2")
        buf.write("\u0137\u0139\3\2\2\2\u0138\u0136\3\2\2\2\u0139\u013a\7")
        buf.write("\23\2\2\u013a\27\3\2\2\2\u013b\u0141\5J&\2\u013c\u013e")
        buf.write("\7\31\2\2\u013d\u013f\5\u0086D\2\u013e\u013d\3\2\2\2\u013e")
        buf.write("\u013f\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u0142\7\32\2")
        buf.write("\2\u0141\u013c\3\2\2\2\u0141\u0142\3\2\2\2\u0142\31\3")
        buf.write("\2\2\2\u0143\u014d\5\34\17\2\u0144\u014d\5$\23\2\u0145")
        buf.write("\u014d\5&\24\2\u0146\u014d\5(\25\2\u0147\u014d\5,\27\2")
        buf.write("\u0148\u014d\5\64\33\2\u0149\u014d\58\35\2\u014a\u014d")
        buf.write("\5 \21\2\u014b\u014d\5\"\22\2\u014c\u0143\3\2\2\2\u014c")
        buf.write("\u0144\3\2\2\2\u014c\u0145\3\2\2\2\u014c\u0146\3\2\2\2")
        buf.write("\u014c\u0147\3\2\2\2\u014c\u0148\3\2\2\2\u014c\u0149\3")
        buf.write("\2\2\2\u014c\u014a\3\2\2\2\u014c\u014b\3\2\2\2\u014d\33")
        buf.write("\3\2\2\2\u014e\u0157\5H%\2\u014f\u0156\7z\2\2\u0150\u0156")
        buf.write("\7w\2\2\u0151\u0156\7y\2\2\u0152\u0156\7q\2\2\u0153\u0156")
        buf.write("\7r\2\2\u0154\u0156\5\u00c0a\2\u0155\u014f\3\2\2\2\u0155")
        buf.write("\u0150\3\2\2\2\u0155\u0151\3\2\2\2\u0155\u0152\3\2\2\2")
        buf.write("\u0155\u0153\3\2\2\2\u0155\u0154\3\2\2\2\u0156\u0159\3")
        buf.write("\2\2\2\u0157\u0155\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u015a")
        buf.write("\3\2\2\2\u0159\u0157\3\2\2\2\u015a\u015d\5\u00bc_\2\u015b")
        buf.write("\u015c\7\f\2\2\u015c\u015e\5\u0082B\2\u015d\u015b\3\2")
        buf.write("\2\2\u015d\u015e\3\2\2\2\u015e\u015f\3\2\2\2\u015f\u0160")
        buf.write("\7\4\2\2\u0160\35\3\2\2\2\u0161\u0162\5H%\2\u0162\u0163")
        buf.write("\7q\2\2\u0163\u0164\5\u00bc_\2\u0164\u0165\7\f\2\2\u0165")
        buf.write("\u0166\5\u0082B\2\u0166\u0167\7\4\2\2\u0167\37\3\2\2\2")
        buf.write("\u0168\u0169\7\33\2\2\u0169\u016a\5\u00bc_\2\u016a\u016b")
        buf.write("\5:\36\2\u016b\u016c\7\4\2\2\u016c!\3\2\2\2\u016d\u016e")
        buf.write("\7}\2\2\u016e\u016f\5\u00bc_\2\u016f\u0170\7\30\2\2\u0170")
        buf.write("\u0171\5\u0080A\2\u0171\u0172\7\4\2\2\u0172#\3\2\2\2\u0173")
        buf.write("\u0174\7\34\2\2\u0174\u0175\5J&\2\u0175\u0178\7\35\2\2")
        buf.write("\u0176\u0179\7\17\2\2\u0177\u0179\5H%\2\u0178\u0176\3")
        buf.write("\2\2\2\u0178\u0177\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u017b")
        buf.write("\7\4\2\2\u017b%\3\2\2\2\u017c\u017d\7\36\2\2\u017d\u017e")
        buf.write("\5\u00bc_\2\u017e\u0189\7\21\2\2\u017f\u0180\5F$\2\u0180")
        buf.write("\u0186\7\4\2\2\u0181\u0182\5F$\2\u0182\u0183\7\4\2\2\u0183")
        buf.write("\u0185\3\2\2\2\u0184\u0181\3\2\2\2\u0185\u0188\3\2\2\2")
        buf.write("\u0186\u0184\3\2\2\2\u0186\u0187\3\2\2\2\u0187\u018a\3")
        buf.write("\2\2\2\u0188\u0186\3\2\2\2\u0189\u017f\3\2\2\2\u0189\u018a")
        buf.write("\3\2\2\2\u018a\u018b\3\2\2\2\u018b\u018c\7\23\2\2\u018c")
        buf.write("\'\3\2\2\2\u018d\u018e\7\37\2\2\u018e\u0190\5\u00bc_\2")
        buf.write("\u018f\u0191\5:\36\2\u0190\u018f\3\2\2\2\u0190\u0191\3")
        buf.write("\2\2\2\u0191\u0196\3\2\2\2\u0192\u0195\7{\2\2\u0193\u0195")
        buf.write("\5\u00c0a\2\u0194\u0192\3\2\2\2\u0194\u0193\3\2\2\2\u0195")
        buf.write("\u0198\3\2\2\2\u0196\u0194\3\2\2\2\u0196\u0197\3\2\2\2")
        buf.write("\u0197\u019b\3\2\2\2\u0198\u0196\3\2\2\2\u0199\u019c\7")
        buf.write("\4\2\2\u019a\u019c\5V,\2\u019b\u0199\3\2\2\2\u019b\u019a")
        buf.write("\3\2\2\2\u019c)\3\2\2\2\u019d\u01a3\5\u00bc_\2\u019e\u01a0")
        buf.write("\7\31\2\2\u019f\u01a1\5\u0086D\2\u01a0\u019f\3\2\2\2\u01a0")
        buf.write("\u01a1\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a4\7\32\2")
        buf.write("\2\u01a3\u019e\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4+\3\2")
        buf.write("\2\2\u01a5\u01a6\5.\30\2\u01a6\u01a7\5:\36\2\u01a7\u01a9")
        buf.write("\5\62\32\2\u01a8\u01aa\5\60\31\2\u01a9\u01a8\3\2\2\2\u01a9")
        buf.write("\u01aa\3\2\2\2\u01aa\u01ad\3\2\2\2\u01ab\u01ae\7\4\2\2")
        buf.write("\u01ac\u01ae\5V,\2\u01ad\u01ab\3\2\2\2\u01ad\u01ac\3\2")
        buf.write("\2\2\u01ae-\3\2\2\2\u01af\u01b1\7 \2\2\u01b0\u01b2\5\u00bc")
        buf.write("_\2\u01b1\u01b0\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01b7")
        buf.write("\3\2\2\2\u01b3\u01b7\7\177\2\2\u01b4\u01b7\7\u0080\2\2")
        buf.write("\u01b5\u01b7\7\u0081\2\2\u01b6\u01af\3\2\2\2\u01b6\u01b3")
        buf.write("\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b6\u01b5\3\2\2\2\u01b7")
        buf.write("/\3\2\2\2\u01b8\u01b9\7!\2\2\u01b9\u01ba\5:\36\2\u01ba")
        buf.write("\61\3\2\2\2\u01bb\u01c4\7u\2\2\u01bc\u01c4\7z\2\2\u01bd")
        buf.write("\u01c4\7w\2\2\u01be\u01c4\7y\2\2\u01bf\u01c4\7{\2\2\u01c0")
        buf.write("\u01c4\5T+\2\u01c1\u01c4\5*\26\2\u01c2\u01c4\5\u00c0a")
        buf.write("\2\u01c3\u01bb\3\2\2\2\u01c3\u01bc\3\2\2\2\u01c3\u01bd")
        buf.write("\3\2\2\2\u01c3\u01be\3\2\2\2\u01c3\u01bf\3\2\2\2\u01c3")
        buf.write("\u01c0\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c3\u01c2\3\2\2\2")
        buf.write("\u01c4\u01c7\3\2\2\2\u01c5\u01c3\3\2\2\2\u01c5\u01c6\3")
        buf.write("\2\2\2\u01c6\63\3\2\2\2\u01c7\u01c5\3\2\2\2\u01c8\u01c9")
        buf.write("\7\"\2\2\u01c9\u01ca\5\u00bc_\2\u01ca\u01cc\5> \2\u01cb")
        buf.write("\u01cd\7o\2\2\u01cc\u01cb\3\2\2\2\u01cc\u01cd\3\2\2\2")
        buf.write("\u01cd\u01ce\3\2\2\2\u01ce\u01cf\7\4\2\2\u01cf\65\3\2")
        buf.write("\2\2\u01d0\u01d1\5\u00bc_\2\u01d1\67\3\2\2\2\u01d2\u01d3")
        buf.write("\7#\2\2\u01d3\u01d4\5\u00bc_\2\u01d4\u01d6\7\21\2\2\u01d5")
        buf.write("\u01d7\5\66\34\2\u01d6\u01d5\3\2\2\2\u01d6\u01d7\3\2\2")
        buf.write("\2\u01d7\u01dc\3\2\2\2\u01d8\u01d9\7\22\2\2\u01d9\u01db")
        buf.write("\5\66\34\2\u01da\u01d8\3\2\2\2\u01db\u01de\3\2\2\2\u01dc")
        buf.write("\u01da\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd\u01df\3\2\2\2")
        buf.write("\u01de\u01dc\3\2\2\2\u01df\u01e0\7\23\2\2\u01e09\3\2\2")
        buf.write("\2\u01e1\u01ea\7\31\2\2\u01e2\u01e7\5<\37\2\u01e3\u01e4")
        buf.write("\7\22\2\2\u01e4\u01e6\5<\37\2\u01e5\u01e3\3\2\2\2\u01e6")
        buf.write("\u01e9\3\2\2\2\u01e7\u01e5\3\2\2\2\u01e7\u01e8\3\2\2\2")
        buf.write("\u01e8\u01eb\3\2\2\2\u01e9\u01e7\3\2\2\2\u01ea\u01e2\3")
        buf.write("\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01ed")
        buf.write("\7\32\2\2\u01ed;\3\2\2\2\u01ee\u01f0\5H%\2\u01ef\u01f1")
        buf.write("\5R*\2\u01f0\u01ef\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f3")
        buf.write("\3\2\2\2\u01f2\u01f4\5\u00bc_\2\u01f3\u01f2\3\2\2\2\u01f3")
        buf.write("\u01f4\3\2\2\2\u01f4=\3\2\2\2\u01f5\u01fe\7\31\2\2\u01f6")
        buf.write("\u01fb\5@!\2\u01f7\u01f8\7\22\2\2\u01f8\u01fa\5@!\2\u01f9")
        buf.write("\u01f7\3\2\2\2\u01fa\u01fd\3\2\2\2\u01fb\u01f9\3\2\2\2")
        buf.write("\u01fb\u01fc\3\2\2\2\u01fc\u01ff\3\2\2\2\u01fd\u01fb\3")
        buf.write("\2\2\2\u01fe\u01f6\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u0200")
        buf.write("\3\2\2\2\u0200\u0201\7\32\2\2\u0201?\3\2\2\2\u0202\u0204")
        buf.write("\5H%\2\u0203\u0205\7v\2\2\u0204\u0203\3\2\2\2\u0204\u0205")
        buf.write("\3\2\2\2\u0205\u0207\3\2\2\2\u0206\u0208\5\u00bc_\2\u0207")
        buf.write("\u0206\3\2\2\2\u0207\u0208\3\2\2\2\u0208A\3\2\2\2\u0209")
        buf.write("\u0212\7\31\2\2\u020a\u020f\5D#\2\u020b\u020c\7\22\2\2")
        buf.write("\u020c\u020e\5D#\2\u020d\u020b\3\2\2\2\u020e\u0211\3\2")
        buf.write("\2\2\u020f\u020d\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0213")
        buf.write("\3\2\2\2\u0211\u020f\3\2\2\2\u0212\u020a\3\2\2\2\u0212")
        buf.write("\u0213\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0215\7\32\2")
        buf.write("\2\u0215C\3\2\2\2\u0216\u0218\5H%\2\u0217\u0219\5R*\2")
        buf.write("\u0218\u0217\3\2\2\2\u0218\u0219\3\2\2\2\u0219E\3\2\2")
        buf.write("\2\u021a\u021c\5H%\2\u021b\u021d\5R*\2\u021c\u021b\3\2")
        buf.write("\2\2\u021c\u021d\3\2\2\2\u021d\u021e\3\2\2\2\u021e\u021f")
        buf.write("\5\u00bc_\2\u021fG\3\2\2\2\u0220\u0221\b%\1\2\u0221\u0228")
        buf.write("\5\u0080A\2\u0222\u0228\5J&\2\u0223\u0228\5N(\2\u0224")
        buf.write("\u0228\5P)\2\u0225\u0226\7&\2\2\u0226\u0228\7x\2\2\u0227")
        buf.write("\u0220\3\2\2\2\u0227\u0222\3\2\2\2\u0227\u0223\3\2\2\2")
        buf.write("\u0227\u0224\3\2\2\2\u0227\u0225\3\2\2\2\u0228\u0231\3")
        buf.write("\2\2\2\u0229\u022a\f\5\2\2\u022a\u022c\7$\2\2\u022b\u022d")
        buf.write("\5\u0082B\2\u022c\u022b\3\2\2\2\u022c\u022d\3\2\2\2\u022d")
        buf.write("\u022e\3\2\2\2\u022e\u0230\7%\2\2\u022f\u0229\3\2\2\2")
        buf.write("\u0230\u0233\3\2\2\2\u0231\u022f\3\2\2\2\u0231\u0232\3")
        buf.write("\2\2\2\u0232I\3\2\2\2\u0233\u0231\3\2\2\2\u0234\u0239")
        buf.write("\5\u00bc_\2\u0235\u0236\7\'\2\2\u0236\u0238\5\u00bc_\2")
        buf.write("\u0237\u0235\3\2\2\2\u0238\u023b\3\2\2\2\u0239\u0237\3")
        buf.write("\2\2\2\u0239\u023a\3\2\2\2\u023aK\3\2\2\2\u023b\u0239")
        buf.write("\3\2\2\2\u023c\u023f\5\u0080A\2\u023d\u023f\5J&\2\u023e")
        buf.write("\u023c\3\2\2\2\u023e\u023d\3\2\2\2\u023fM\3\2\2\2\u0240")
        buf.write("\u0241\7(\2\2\u0241\u0242\7\31\2\2\u0242\u0243\5L\'\2")
        buf.write("\u0243\u0244\7)\2\2\u0244\u0245\5H%\2\u0245\u0246\7\32")
        buf.write("\2\2\u0246O\3\2\2\2\u0247\u0248\7 \2\2\u0248\u024e\5B")
        buf.write("\"\2\u0249\u024d\7w\2\2\u024a\u024d\7u\2\2\u024b\u024d")
        buf.write("\5T+\2\u024c\u0249\3\2\2\2\u024c\u024a\3\2\2\2\u024c\u024b")
        buf.write("\3\2\2\2\u024d\u0250\3\2\2\2\u024e\u024c\3\2\2\2\u024e")
        buf.write("\u024f\3\2\2\2\u024f\u0253\3\2\2\2\u0250\u024e\3\2\2\2")
        buf.write("\u0251\u0252\7!\2\2\u0252\u0254\5B\"\2\u0253\u0251\3\2")
        buf.write("\2\2\u0253\u0254\3\2\2\2\u0254Q\3\2\2\2\u0255\u0256\t")
        buf.write("\4\2\2\u0256S\3\2\2\2\u0257\u0258\t\5\2\2\u0258U\3\2\2")
        buf.write("\2\u0259\u025d\7\21\2\2\u025a\u025c\5X-\2\u025b\u025a")
        buf.write("\3\2\2\2\u025c\u025f\3\2\2\2\u025d\u025b\3\2\2\2\u025d")
        buf.write("\u025e\3\2\2\2\u025e\u0260\3\2\2\2\u025f\u025d\3\2\2\2")
        buf.write("\u0260\u0261\7\23\2\2\u0261W\3\2\2\2\u0262\u0272\5\\/")
        buf.write("\2\u0263\u0272\5^\60\2\u0264\u0272\5b\62\2\u0265\u0272")
        buf.write("\5h\65\2\u0266\u0272\5V,\2\u0267\u0272\5j\66\2\u0268\u0272")
        buf.write("\5l\67\2\u0269\u0272\5n8\2\u026a\u0272\5p9\2\u026b\u0272")
        buf.write("\5r:\2\u026c\u0272\5t;\2\u026d\u0272\5v<\2\u026e\u0272")
        buf.write("\5d\63\2\u026f\u0272\5f\64\2\u0270\u0272\5x=\2\u0271\u0262")
        buf.write("\3\2\2\2\u0271\u0263\3\2\2\2\u0271\u0264\3\2\2\2\u0271")
        buf.write("\u0265\3\2\2\2\u0271\u0266\3\2\2\2\u0271\u0267\3\2\2\2")
        buf.write("\u0271\u0268\3\2\2\2\u0271\u0269\3\2\2\2\u0271\u026a\3")
        buf.write("\2\2\2\u0271\u026b\3\2\2\2\u0271\u026c\3\2\2\2\u0271\u026d")
        buf.write("\3\2\2\2\u0271\u026e\3\2\2\2\u0271\u026f\3\2\2\2\u0271")
        buf.write("\u0270\3\2\2\2\u0272Y\3\2\2\2\u0273\u0274\5\u0082B\2\u0274")
        buf.write("\u0275\7\4\2\2\u0275[\3\2\2\2\u0276\u0277\7-\2\2\u0277")
        buf.write("\u0278\7\31\2\2\u0278\u0279\5\u0082B\2\u0279\u027a\7\32")
        buf.write("\2\2\u027a\u027d\5X-\2\u027b\u027c\7.\2\2\u027c\u027e")
        buf.write("\5X-\2\u027d\u027b\3\2\2\2\u027d\u027e\3\2\2\2\u027e]")
        buf.write("\3\2\2\2\u027f\u0280\7/\2\2\u0280\u0282\5\u0082B\2\u0281")
        buf.write("\u0283\5\60\31\2\u0282\u0281\3\2\2\2\u0282\u0283\3\2\2")
        buf.write("\2\u0283\u0284\3\2\2\2\u0284\u0286\5V,\2\u0285\u0287\5")
        buf.write("`\61\2\u0286\u0285\3\2\2\2\u0287\u0288\3\2\2\2\u0288\u0286")
        buf.write("\3\2\2\2\u0288\u0289\3\2\2\2\u0289_\3\2\2\2\u028a\u028f")
        buf.write("\7\60\2\2\u028b\u028d\5\u00bc_\2\u028c\u028b\3\2\2\2\u028c")
        buf.write("\u028d\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u0290\5:\36\2")
        buf.write("\u028f\u028c\3\2\2\2\u028f\u0290\3\2\2\2\u0290\u0291\3")
        buf.write("\2\2\2\u0291\u0292\5V,\2\u0292a\3\2\2\2\u0293\u0294\7")
        buf.write("\61\2\2\u0294\u0295\7\31\2\2\u0295\u0296\5\u0082B\2\u0296")
        buf.write("\u0297\7\32\2\2\u0297\u0298\5X-\2\u0298c\3\2\2\2\u0299")
        buf.write("\u029c\5z>\2\u029a\u029c\5Z.\2\u029b\u0299\3\2\2\2\u029b")
        buf.write("\u029a\3\2\2\2\u029ce\3\2\2\2\u029d\u029e\7\62\2\2\u029e")
        buf.write("\u029f\5V,\2\u029fg\3\2\2\2\u02a0\u02a1\7\35\2\2\u02a1")
        buf.write("\u02a4\7\31\2\2\u02a2\u02a5\5d\63\2\u02a3\u02a5\7\4\2")
        buf.write("\2\u02a4\u02a2\3\2\2\2\u02a4\u02a3\3\2\2\2\u02a5\u02a8")
        buf.write("\3\2\2\2\u02a6\u02a9\5Z.\2\u02a7\u02a9\7\4\2\2\u02a8\u02a6")
        buf.write("\3\2\2\2\u02a8\u02a7\3\2\2\2\u02a9\u02ab\3\2\2\2\u02aa")
        buf.write("\u02ac\5\u0082B\2\u02ab\u02aa\3\2\2\2\u02ab\u02ac\3\2")
        buf.write("\2\2\u02ac\u02ad\3\2\2\2\u02ad\u02ae\7\32\2\2\u02ae\u02af")
        buf.write("\5X-\2\u02afi\3\2\2\2\u02b0\u02b2\7\63\2\2\u02b1\u02b3")
        buf.write("\7\u0083\2\2\u02b2\u02b1\3\2\2\2\u02b2\u02b3\3\2\2\2\u02b3")
        buf.write("\u02b4\3\2\2\2\u02b4\u02b5\5\u0090I\2\u02b5k\3\2\2\2\u02b6")
        buf.write("\u02b7\7\64\2\2\u02b7\u02b8\5X-\2\u02b8\u02b9\7\61\2\2")
        buf.write("\u02b9\u02ba\7\31\2\2\u02ba\u02bb\5\u0082B\2\u02bb\u02bc")
        buf.write("\7\32\2\2\u02bc\u02bd\7\4\2\2\u02bdm\3\2\2\2\u02be\u02bf")
        buf.write("\7s\2\2\u02bf\u02c0\7\4\2\2\u02c0o\3\2\2\2\u02c1\u02c2")
        buf.write("\7p\2\2\u02c2\u02c3\7\4\2\2\u02c3q\3\2\2\2\u02c4\u02c6")
        buf.write("\7\65\2\2\u02c5\u02c7\5\u0082B\2\u02c6\u02c5\3\2\2\2\u02c6")
        buf.write("\u02c7\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\u02c9\7\4\2\2")
        buf.write("\u02c9s\3\2\2\2\u02ca\u02cb\7\66\2\2\u02cb\u02cc\7\4\2")
        buf.write("\2\u02ccu\3\2\2\2\u02cd\u02ce\7\67\2\2\u02ce\u02cf\5\u008e")
        buf.write("H\2\u02cf\u02d0\7\4\2\2\u02d0w\3\2\2\2\u02d1\u02d2\78")
        buf.write("\2\2\u02d2\u02d3\5\u008eH\2\u02d3\u02d4\7\4\2\2\u02d4")
        buf.write("y\3\2\2\2\u02d5\u02d6\79\2\2\u02d6\u02dd\5~@\2\u02d7\u02dd")
        buf.write("\5F$\2\u02d8\u02d9\7\31\2\2\u02d9\u02da\5|?\2\u02da\u02db")
        buf.write("\7\32\2\2\u02db\u02dd\3\2\2\2\u02dc\u02d5\3\2\2\2\u02dc")
        buf.write("\u02d7\3\2\2\2\u02dc\u02d8\3\2\2\2\u02dd\u02e0\3\2\2\2")
        buf.write("\u02de\u02df\7\f\2\2\u02df\u02e1\5\u0082B\2\u02e0\u02de")
        buf.write("\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2")
        buf.write("\u02e3\7\4\2\2\u02e3{\3\2\2\2\u02e4\u02e6\5F$\2\u02e5")
        buf.write("\u02e4\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02ed\3\2\2\2")
        buf.write("\u02e7\u02e9\7\22\2\2\u02e8\u02ea\5F$\2\u02e9\u02e8\3")
        buf.write("\2\2\2\u02e9\u02ea\3\2\2\2\u02ea\u02ec\3\2\2\2\u02eb\u02e7")
        buf.write("\3\2\2\2\u02ec\u02ef\3\2\2\2\u02ed\u02eb\3\2\2\2\u02ed")
        buf.write("\u02ee\3\2\2\2\u02ee}\3\2\2\2\u02ef\u02ed\3\2\2\2\u02f0")
        buf.write("\u02f7\7\31\2\2\u02f1\u02f3\5\u00bc_\2\u02f2\u02f1\3\2")
        buf.write("\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4\u02f6")
        buf.write("\7\22\2\2\u02f5\u02f2\3\2\2\2\u02f6\u02f9\3\2\2\2\u02f7")
        buf.write("\u02f5\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02fb\3\2\2\2")
        buf.write("\u02f9\u02f7\3\2\2\2\u02fa\u02fc\5\u00bc_\2\u02fb\u02fa")
        buf.write("\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fd")
        buf.write("\u02fe\7\32\2\2\u02fe\177\3\2\2\2\u02ff\u0300\t\6\2\2")
        buf.write("\u0300\u0081\3\2\2\2\u0301\u0302\bB\1\2\u0302\u0303\7")
        buf.write("?\2\2\u0303\u0314\5H%\2\u0304\u0305\7\31\2\2\u0305\u0306")
        buf.write("\5\u0082B\2\u0306\u0307\7\32\2\2\u0307\u0314\3\2\2\2\u0308")
        buf.write("\u0309\t\7\2\2\u0309\u0314\5\u0082B\25\u030a\u030b\t\b")
        buf.write("\2\2\u030b\u0314\5\u0082B\24\u030c\u030d\t\t\2\2\u030d")
        buf.write("\u0314\5\u0082B\23\u030e\u030f\7E\2\2\u030f\u0314\5\u0082")
        buf.write("B\22\u0310\u0311\7\7\2\2\u0311\u0314\5\u0082B\21\u0312")
        buf.write("\u0314\5\u0084C\2\u0313\u0301\3\2\2\2\u0313\u0304\3\2")
        buf.write("\2\2\u0313\u0308\3\2\2\2\u0313\u030a\3\2\2\2\u0313\u030c")
        buf.write("\3\2\2\2\u0313\u030e\3\2\2\2\u0313\u0310\3\2\2\2\u0313")
        buf.write("\u0312\3\2\2\2\u0314\u035f\3\2\2\2\u0315\u0316\f\20\2")
        buf.write("\2\u0316\u0317\7F\2\2\u0317\u035e\5\u0082B\21\u0318\u0319")
        buf.write("\f\17\2\2\u0319\u031a\t\n\2\2\u031a\u035e\5\u0082B\20")
        buf.write("\u031b\u031c\f\16\2\2\u031c\u031d\t\b\2\2\u031d\u035e")
        buf.write("\5\u0082B\17\u031e\u031f\f\r\2\2\u031f\u0320\t\13\2\2")
        buf.write("\u0320\u035e\5\u0082B\16\u0321\u0322\f\f\2\2\u0322\u0323")
        buf.write("\7K\2\2\u0323\u035e\5\u0082B\r\u0324\u0325\f\13\2\2\u0325")
        buf.write("\u0326\7\6\2\2\u0326\u035e\5\u0082B\f\u0327\u0328\f\n")
        buf.write("\2\2\u0328\u0329\7L\2\2\u0329\u035e\5\u0082B\13\u032a")
        buf.write("\u032b\f\t\2\2\u032b\u032c\t\f\2\2\u032c\u035e\5\u0082")
        buf.write("B\n\u032d\u032e\f\b\2\2\u032e\u032f\t\r\2\2\u032f\u035e")
        buf.write("\5\u0082B\t\u0330\u0331\f\7\2\2\u0331\u0332\7O\2\2\u0332")
        buf.write("\u035e\5\u0082B\b\u0333\u0334\f\6\2\2\u0334\u0335\7\5")
        buf.write("\2\2\u0335\u035e\5\u0082B\7\u0336\u0337\f\5\2\2\u0337")
        buf.write("\u0338\7P\2\2\u0338\u0339\5\u0082B\2\u0339\u033a\7@\2")
        buf.write("\2\u033a\u033b\5\u0082B\6\u033b\u035e\3\2\2\2\u033c\u033d")
        buf.write("\f\4\2\2\u033d\u033e\t\16\2\2\u033e\u035e\5\u0082B\5\u033f")
        buf.write("\u0340\f\35\2\2\u0340\u035e\t\7\2\2\u0341\u0342\f\33\2")
        buf.write("\2\u0342\u0343\7$\2\2\u0343\u0344\5\u0082B\2\u0344\u0345")
        buf.write("\7%\2\2\u0345\u035e\3\2\2\2\u0346\u0347\f\32\2\2\u0347")
        buf.write("\u0349\7$\2\2\u0348\u034a\5\u0082B\2\u0349\u0348\3\2\2")
        buf.write("\2\u0349\u034a\3\2\2\2\u034a\u034b\3\2\2\2\u034b\u034d")
        buf.write("\7@\2\2\u034c\u034e\5\u0082B\2\u034d\u034c\3\2\2\2\u034d")
        buf.write("\u034e\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u035e\7%\2\2")
        buf.write("\u0350\u0351\f\31\2\2\u0351\u0352\7\'\2\2\u0352\u035e")
        buf.write("\5\u00bc_\2\u0353\u0354\f\30\2\2\u0354\u0355\7\21\2\2")
        buf.write("\u0355\u0356\5\u0088E\2\u0356\u0357\7\23\2\2\u0357\u035e")
        buf.write("\3\2\2\2\u0358\u0359\f\27\2\2\u0359\u035a\7\31\2\2\u035a")
        buf.write("\u035b\5\u008cG\2\u035b\u035c\7\32\2\2\u035c\u035e\3\2")
        buf.write("\2\2\u035d\u0315\3\2\2\2\u035d\u0318\3\2\2\2\u035d\u031b")
        buf.write("\3\2\2\2\u035d\u031e\3\2\2\2\u035d\u0321\3\2\2\2\u035d")
        buf.write("\u0324\3\2\2\2\u035d\u0327\3\2\2\2\u035d\u032a\3\2\2\2")
        buf.write("\u035d\u032d\3\2\2\2\u035d\u0330\3\2\2\2\u035d\u0333\3")
        buf.write("\2\2\2\u035d\u0336\3\2\2\2\u035d\u033c\3\2\2\2\u035d\u033f")
        buf.write("\3\2\2\2\u035d\u0341\3\2\2\2\u035d\u0346\3\2\2\2\u035d")
        buf.write("\u0350\3\2\2\2\u035d\u0353\3\2\2\2\u035d\u0358\3\2\2\2")
        buf.write("\u035e\u0361\3\2\2\2\u035f\u035d\3\2\2\2\u035f\u0360\3")
        buf.write("\2\2\2\u0360\u0083\3\2\2\2\u0361\u035f\3\2\2\2\u0362\u0374")
        buf.write("\7i\2\2\u0363\u0374\5\u00ba^\2\u0364\u0374\5\u00be`\2")
        buf.write("\u0365\u0374\5\u00c2b\2\u0366\u0369\5\u00bc_\2\u0367\u0368")
        buf.write("\7$\2\2\u0368\u036a\7%\2\2\u0369\u0367\3\2\2\2\u0369\u036a")
        buf.write("\3\2\2\2\u036a\u0374\3\2\2\2\u036b\u0374\7}\2\2\u036c")
        buf.write("\u0374\7x\2\2\u036d\u0374\5\u00b6\\\2\u036e\u0371\5\u00b8")
        buf.write("]\2\u036f\u0370\7$\2\2\u0370\u0372\7%\2\2\u0371\u036f")
        buf.write("\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u0374\3\2\2\2\u0373")
        buf.write("\u0362\3\2\2\2\u0373\u0363\3\2\2\2\u0373\u0364\3\2\2\2")
        buf.write("\u0373\u0365\3\2\2\2\u0373\u0366\3\2\2\2\u0373\u036b\3")
        buf.write("\2\2\2\u0373\u036c\3\2\2\2\u0373\u036d\3\2\2\2\u0373\u036e")
        buf.write("\3\2\2\2\u0374\u0085\3\2\2\2\u0375\u037a\5\u0082B\2\u0376")
        buf.write("\u0377\7\22\2\2\u0377\u0379\5\u0082B\2\u0378\u0376\3\2")
        buf.write("\2\2\u0379\u037c\3\2\2\2\u037a\u0378\3\2\2\2\u037a\u037b")
        buf.write("\3\2\2\2\u037b\u0087\3\2\2\2\u037c\u037a\3\2\2\2\u037d")
        buf.write("\u0382\5\u008aF\2\u037e\u037f\7\22\2\2\u037f\u0381\5\u008a")
        buf.write("F\2\u0380\u037e\3\2\2\2\u0381\u0384\3\2\2\2\u0382\u0380")
        buf.write("\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u0386\3\2\2\2\u0384")
        buf.write("\u0382\3\2\2\2\u0385\u0387\7\22\2\2\u0386\u0385\3\2\2")
        buf.write("\2\u0386\u0387\3\2\2\2\u0387\u0089\3\2\2\2\u0388\u0389")
        buf.write("\5\u00bc_\2\u0389\u038a\7@\2\2\u038a\u038b\5\u0082B\2")
        buf.write("\u038b\u008b\3\2\2\2\u038c\u038e\7\21\2\2\u038d\u038f")
        buf.write("\5\u0088E\2\u038e\u038d\3\2\2\2\u038e\u038f\3\2\2\2\u038f")
        buf.write("\u0390\3\2\2\2\u0390\u0395\7\23\2\2\u0391\u0393\5\u0086")
        buf.write("D\2\u0392\u0391\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0395")
        buf.write("\3\2\2\2\u0394\u038c\3\2\2\2\u0394\u0392\3\2\2\2\u0395")
        buf.write("\u008d\3\2\2\2\u0396\u0397\5\u0082B\2\u0397\u0398\7\31")
        buf.write("\2\2\u0398\u0399\5\u008cG\2\u0399\u039a\7\32\2\2\u039a")
        buf.write("\u008f\3\2\2\2\u039b\u039f\7\21\2\2\u039c\u039e\5\u0092")
        buf.write("J\2\u039d\u039c\3\2\2\2\u039e\u03a1\3\2\2\2\u039f\u039d")
        buf.write("\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a2\3\2\2\2\u03a1")
        buf.write("\u039f\3\2\2\2\u03a2\u03a3\7\23\2\2\u03a3\u0091\3\2\2")
        buf.write("\2\u03a4\u03b7\5\u00bc_\2\u03a5\u03b7\5\u0090I\2\u03a6")
        buf.write("\u03b7\5\u0094K\2\u03a7\u03b7\5\u009aN\2\u03a8\u03b7\5")
        buf.write("\u009cO\2\u03a9\u03b7\5\u00a2R\2\u03aa\u03b7\5\u00a4S")
        buf.write("\2\u03ab\u03b7\5\u00a6T\2\u03ac\u03b7\5\u00aaV\2\u03ad")
        buf.write("\u03b7\5\u00aeX\2\u03ae\u03b7\5\u00b0Y\2\u03af\u03b7\7")
        buf.write("p\2\2\u03b0\u03b7\7s\2\2\u03b1\u03b7\7t\2\2\u03b2\u03b7")
        buf.write("\5\u00b4[\2\u03b3\u03b7\5\u00ba^\2\u03b4\u03b7\5\u00c2")
        buf.write("b\2\u03b5\u03b7\5\u00be`\2\u03b6\u03a4\3\2\2\2\u03b6\u03a5")
        buf.write("\3\2\2\2\u03b6\u03a6\3\2\2\2\u03b6\u03a7\3\2\2\2\u03b6")
        buf.write("\u03a8\3\2\2\2\u03b6\u03a9\3\2\2\2\u03b6\u03aa\3\2\2\2")
        buf.write("\u03b6\u03ab\3\2\2\2\u03b6\u03ac\3\2\2\2\u03b6\u03ad\3")
        buf.write("\2\2\2\u03b6\u03ae\3\2\2\2\u03b6\u03af\3\2\2\2\u03b6\u03b0")
        buf.write("\3\2\2\2\u03b6\u03b1\3\2\2\2\u03b6\u03b2\3\2\2\2\u03b6")
        buf.write("\u03b3\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b6\u03b5\3\2\2\2")
        buf.write("\u03b7\u0093\3\2\2\2\u03b8\u03bc\5\u0098M\2\u03b9\u03bc")
        buf.write("\5\u00b2Z\2\u03ba\u03bc\5\u0096L\2\u03bb\u03b8\3\2\2\2")
        buf.write("\u03bb\u03b9\3\2\2\2\u03bb\u03ba\3\2\2\2\u03bc\u0095\3")
        buf.write("\2\2\2\u03bd\u03be\5\u00bc_\2\u03be\u03bf\7\'\2\2\u03bf")
        buf.write("\u03c0\5\u00bc_\2\u03c0\u0097\3\2\2\2\u03c1\u03c6\7\65")
        buf.write("\2\2\u03c2\u03c6\7&\2\2\u03c3\u03c6\7<\2\2\u03c4\u03c6")
        buf.write("\5\u00bc_\2\u03c5\u03c1\3\2\2\2\u03c5\u03c2\3\2\2\2\u03c5")
        buf.write("\u03c3\3\2\2\2\u03c5\u03c4\3\2\2\2\u03c6\u03d3\3\2\2\2")
        buf.write("\u03c7\u03c9\7\31\2\2\u03c8\u03ca\5\u0094K\2\u03c9\u03c8")
        buf.write("\3\2\2\2\u03c9\u03ca\3\2\2\2\u03ca\u03cf\3\2\2\2\u03cb")
        buf.write("\u03cc\7\22\2\2\u03cc\u03ce\5\u0094K\2\u03cd\u03cb\3\2")
        buf.write("\2\2\u03ce\u03d1\3\2\2\2\u03cf\u03cd\3\2\2\2\u03cf\u03d0")
        buf.write("\3\2\2\2\u03d0\u03d2\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d2")
        buf.write("\u03d4\7\32\2\2\u03d3\u03c7\3\2\2\2\u03d3\u03d4\3\2\2")
        buf.write("\2\u03d4\u0099\3\2\2\2\u03d5\u03d6\7[\2\2\u03d6\u03d9")
        buf.write("\5\u009eP\2\u03d7\u03d8\7\\\2\2\u03d8\u03da\5\u0094K\2")
        buf.write("\u03d9\u03d7\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u009b\3")
        buf.write("\2\2\2\u03db\u03dc\5\u009eP\2\u03dc\u03dd\7\\\2\2\u03dd")
        buf.write("\u03de\5\u0094K\2\u03de\u009d\3\2\2\2\u03df\u03e6\5\u00bc")
        buf.write("_\2\u03e0\u03e6\5\u0096L\2\u03e1\u03e2\7\31\2\2\u03e2")
        buf.write("\u03e3\5\u00a0Q\2\u03e3\u03e4\7\32\2\2\u03e4\u03e6\3\2")
        buf.write("\2\2\u03e5\u03df\3\2\2\2\u03e5\u03e0\3\2\2\2\u03e5\u03e1")
        buf.write("\3\2\2\2\u03e6\u009f\3\2\2\2\u03e7\u03ec\5\u00bc_\2\u03e8")
        buf.write("\u03e9\7\22\2\2\u03e9\u03eb\5\u00bc_\2\u03ea\u03e8\3\2")
        buf.write("\2\2\u03eb\u03ee\3\2\2\2\u03ec\u03ea\3\2\2\2\u03ec\u03ed")
        buf.write("\3\2\2\2\u03ed\u00a1\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ef")
        buf.write("\u03f0\7]\2\2\u03f0\u03f1\5\u00bc_\2\u03f1\u00a3\3\2\2")
        buf.write("\2\u03f2\u03f3\5\u00bc_\2\u03f3\u03f4\7@\2\2\u03f4\u00a5")
        buf.write("\3\2\2\2\u03f5\u03f6\7^\2\2\u03f6\u03fa\5\u0094K\2\u03f7")
        buf.write("\u03f9\5\u00a8U\2\u03f8\u03f7\3\2\2\2\u03f9\u03fc\3\2")
        buf.write("\2\2\u03fa\u03f8\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u00a7")
        buf.write("\3\2\2\2\u03fc\u03fa\3\2\2\2\u03fd\u03fe\7_\2\2\u03fe")
        buf.write("\u03ff\5\u00b2Z\2\u03ff\u0400\5\u0090I\2\u0400\u0404\3")
        buf.write("\2\2\2\u0401\u0402\7`\2\2\u0402\u0404\5\u0090I\2\u0403")
        buf.write("\u03fd\3\2\2\2\u0403\u0401\3\2\2\2\u0404\u00a9\3\2\2\2")
        buf.write("\u0405\u0406\7 \2\2\u0406\u0407\5\u00bc_\2\u0407\u0409")
        buf.write("\7\31\2\2\u0408\u040a\5\u00a0Q\2\u0409\u0408\3\2\2\2\u0409")
        buf.write("\u040a\3\2\2\2\u040a\u040b\3\2\2\2\u040b\u040d\7\32\2")
        buf.write("\2\u040c\u040e\5\u00acW\2\u040d\u040c\3\2\2\2\u040d\u040e")
        buf.write("\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0410\5\u0090I\2\u0410")
        buf.write("\u00ab\3\2\2\2\u0411\u0412\7a\2\2\u0412\u0413\5\u00a0")
        buf.write("Q\2\u0413\u00ad\3\2\2\2\u0414\u0417\7\35\2\2\u0415\u0418")
        buf.write("\5\u0090I\2\u0416\u0418\5\u0094K\2\u0417\u0415\3\2\2\2")
        buf.write("\u0417\u0416\3\2\2\2\u0418\u0419\3\2\2\2\u0419\u041c\5")
        buf.write("\u0094K\2\u041a\u041d\5\u0090I\2\u041b\u041d\5\u0094K")
        buf.write("\2\u041c\u041a\3\2\2\2\u041c\u041b\3\2\2\2\u041d\u041e")
        buf.write("\3\2\2\2\u041e\u041f\5\u0090I\2\u041f\u00af\3\2\2\2\u0420")
        buf.write("\u0421\7-\2\2\u0421\u0422\5\u0094K\2\u0422\u0423\5\u0090")
        buf.write("I\2\u0423\u00b1\3\2\2\2\u0424\u0429\5\u00c2b\2\u0425\u0429")
        buf.write("\7j\2\2\u0426\u0429\7k\2\2\u0427\u0429\5\u00be`\2\u0428")
        buf.write("\u0424\3\2\2\2\u0428\u0425\3\2\2\2\u0428\u0426\3\2\2\2")
        buf.write("\u0428\u0427\3\2\2\2\u0429\u00b3\3\2\2\2\u042a\u042b\7")
        buf.write("\63\2\2\u042b\u042c\5\u00bc_\2\u042c\u042d\5\u0090I\2")
        buf.write("\u042d\u00b5\3\2\2\2\u042e\u0430\7\31\2\2\u042f\u0431")
        buf.write("\5\u0082B\2\u0430\u042f\3\2\2\2\u0430\u0431\3\2\2\2\u0431")
        buf.write("\u0438\3\2\2\2\u0432\u0434\7\22\2\2\u0433\u0435\5\u0082")
        buf.write("B\2\u0434\u0433\3\2\2\2\u0434\u0435\3\2\2\2\u0435\u0437")
        buf.write("\3\2\2\2\u0436\u0432\3\2\2\2\u0437\u043a\3\2\2\2\u0438")
        buf.write("\u0436\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043b\3\2\2\2")
        buf.write("\u043a\u0438\3\2\2\2\u043b\u0449\7\32\2\2\u043c\u0445")
        buf.write("\7$\2\2\u043d\u0442\5\u0082B\2\u043e\u043f\7\22\2\2\u043f")
        buf.write("\u0441\5\u0082B\2\u0440\u043e\3\2\2\2\u0441\u0444\3\2")
        buf.write("\2\2\u0442\u0440\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0446")
        buf.write("\3\2\2\2\u0444\u0442\3\2\2\2\u0445\u043d\3\2\2\2\u0445")
        buf.write("\u0446\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u0449\7%\2\2")
        buf.write("\u0448\u042e\3\2\2\2\u0448\u043c\3\2\2\2\u0449\u00b7\3")
        buf.write("\2\2\2\u044a\u044d\5\u0080A\2\u044b\u044d\5J&\2\u044c")
        buf.write("\u044a\3\2\2\2\u044c\u044b\3\2\2\2\u044d\u00b9\3\2\2\2")
        buf.write("\u044e\u0450\t\17\2\2\u044f\u0451\7l\2\2\u0450\u044f\3")
        buf.write("\2\2\2\u0450\u0451\3\2\2\2\u0451\u00bb\3\2\2\2\u0452\u0453")
        buf.write("\t\20\2\2\u0453\u00bd\3\2\2\2\u0454\u0456\7m\2\2\u0455")
        buf.write("\u0454\3\2\2\2\u0456\u0457\3\2\2\2\u0457\u0455\3\2\2\2")
        buf.write("\u0457\u0458\3\2\2\2\u0458\u00bf\3\2\2\2\u0459\u0465\7")
        buf.write("c\2\2\u045a\u045b\7\31\2\2\u045b\u0460\5J&\2\u045c\u045d")
        buf.write("\7\22\2\2\u045d\u045f\5J&\2\u045e\u045c\3\2\2\2\u045f")
        buf.write("\u0462\3\2\2\2\u0460\u045e\3\2\2\2\u0460\u0461\3\2\2\2")
        buf.write("\u0461\u0463\3\2\2\2\u0462\u0460\3\2\2\2\u0463\u0464\7")
        buf.write("\32\2\2\u0464\u0466\3\2\2\2\u0465\u045a\3\2\2\2\u0465")
        buf.write("\u0466\3\2\2\2\u0466\u00c1\3\2\2\2\u0467\u0469\7\u0083")
        buf.write("\2\2\u0468\u0467\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u0468")
        buf.write("\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u00c3\3\2\2\2\u0080")
        buf.write("\u00cd\u00cf\u00dd\u00e1\u00e6\u00ec\u00f0\u00f3\u00f8")
        buf.write("\u00fe\u0105\u0109\u0116\u011e\u0123\u012d\u0130\u0136")
        buf.write("\u013e\u0141\u014c\u0155\u0157\u015d\u0178\u0186\u0189")
        buf.write("\u0190\u0194\u0196\u019b\u01a0\u01a3\u01a9\u01ad\u01b1")
        buf.write("\u01b6\u01c3\u01c5\u01cc\u01d6\u01dc\u01e7\u01ea\u01f0")
        buf.write("\u01f3\u01fb\u01fe\u0204\u0207\u020f\u0212\u0218\u021c")
        buf.write("\u0227\u022c\u0231\u0239\u023e\u024c\u024e\u0253\u025d")
        buf.write("\u0271\u027d\u0282\u0288\u028c\u028f\u029b\u02a4\u02a8")
        buf.write("\u02ab\u02b2\u02c6\u02dc\u02e0\u02e5\u02e9\u02ed\u02f2")
        buf.write("\u02f7\u02fb\u0313\u0349\u034d\u035d\u035f\u0369\u0371")
        buf.write("\u0373\u037a\u0382\u0386\u038e\u0392\u0394\u039f\u03b6")
        buf.write("\u03bb\u03c5\u03c9\u03cf\u03d3\u03d9\u03e5\u03ec\u03fa")
        buf.write("\u0403\u0409\u040d\u0417\u041c\u0428\u0430\u0434\u0438")
        buf.write("\u0442\u0445\u0448\u044c\u0450\u0457\u0460\u0465\u046a")
        return buf.getvalue()


class SolidityParser ( Parser ):

    grammarFileName = "Solidity.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "';'", "'||'", "'^'", "'~'", 
                     "'>='", "'>'", "'<'", "'<='", "'='", "'as'", "'import'", 
                     "'*'", "'from'", "'{'", "','", "'}'", "'abstract'", 
                     "'contract'", "'interface'", "'library'", "'is'", "'('", 
                     "')'", "'error'", "'using'", "'for'", "'struct'", "'modifier'", 
                     "'function'", "'returns'", "'event'", "'enum'", "'['", 
                     "']'", "'address'", "'.'", "'mapping'", "'=>'", "'memory'", 
                     "'storage'", "'calldata'", "'if'", "'else'", "'try'", 
                     "'catch'", "'while'", "'unchecked'", "'assembly'", 
                     "'do'", "'return'", "'throw'", "'emit'", "'revert'", 
                     "'var'", "'bool'", "'string'", "'byte'", "'++'", "'--'", 
                     "'new'", "':'", "'+'", "'-'", "'after'", "'delete'", 
                     "'!'", "'**'", "'/'", "'%'", "'<<'", "'>>'", "'&'", 
                     "'|'", "'=='", "'!='", "'&&'", "'?'", "'|='", "'^='", 
                     "'&='", "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", 
                     "'%='", "'let'", "':='", "'=:'", "'switch'", "'case'", 
                     "'default'", "'->'", "'callback'", "'override'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'anonymous'", "'break'", 
                     "'constant'", "'immutable'", "'continue'", "'leave'", 
                     "'external'", "'indexed'", "'internal'", "'payable'", 
                     "'private'", "'public'", "'virtual'", "'pure'", "'type'", 
                     "'view'", "'constructor'", "'fallback'", "'receive'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "Int", "Uint", "Byte", "Fixed", 
                      "Ufixed", "BooleanLiteral", "DecimalNumber", "HexNumber", 
                      "NumberUnit", "HexLiteralFragment", "ReservedKeyword", 
                      "AnonymousKeyword", "BreakKeyword", "ConstantKeyword", 
                      "ImmutableKeyword", "ContinueKeyword", "LeaveKeyword", 
                      "ExternalKeyword", "IndexedKeyword", "InternalKeyword", 
                      "PayableKeyword", "PrivateKeyword", "PublicKeyword", 
                      "VirtualKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", 
                      "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", 
                      "Identifier", "StringLiteralFragment", "VersionLiteral", 
                      "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionOperator = 5
    RULE_versionConstraint = 6
    RULE_importDeclaration = 7
    RULE_importDirective = 8
    RULE_importPath = 9
    RULE_contractDefinition = 10
    RULE_inheritanceSpecifier = 11
    RULE_contractPart = 12
    RULE_stateVariableDeclaration = 13
    RULE_fileLevelConstant = 14
    RULE_customErrorDefinition = 15
    RULE_typeDefinition = 16
    RULE_usingForDeclaration = 17
    RULE_structDefinition = 18
    RULE_modifierDefinition = 19
    RULE_modifierInvocation = 20
    RULE_functionDefinition = 21
    RULE_functionDescriptor = 22
    RULE_returnParameters = 23
    RULE_modifierList = 24
    RULE_eventDefinition = 25
    RULE_enumValue = 26
    RULE_enumDefinition = 27
    RULE_parameterList = 28
    RULE_parameter = 29
    RULE_eventParameterList = 30
    RULE_eventParameter = 31
    RULE_functionTypeParameterList = 32
    RULE_functionTypeParameter = 33
    RULE_variableDeclaration = 34
    RULE_typeName = 35
    RULE_userDefinedTypeName = 36
    RULE_mappingKey = 37
    RULE_mapping = 38
    RULE_functionTypeName = 39
    RULE_storageLocation = 40
    RULE_stateMutability = 41
    RULE_block = 42
    RULE_statement = 43
    RULE_expressionStatement = 44
    RULE_ifStatement = 45
    RULE_tryStatement = 46
    RULE_catchClause = 47
    RULE_whileStatement = 48
    RULE_simpleStatement = 49
    RULE_uncheckedStatement = 50
    RULE_forStatement = 51
    RULE_inlineAssemblyStatement = 52
    RULE_doWhileStatement = 53
    RULE_continueStatement = 54
    RULE_breakStatement = 55
    RULE_returnStatement = 56
    RULE_throwStatement = 57
    RULE_emitStatement = 58
    RULE_revertStatement = 59
    RULE_variableDeclarationStatement = 60
    RULE_variableDeclarationList = 61
    RULE_identifierList = 62
    RULE_elementaryTypeName = 63
    RULE_expression = 64
    RULE_primaryExpression = 65
    RULE_expressionList = 66
    RULE_nameValueList = 67
    RULE_nameValue = 68
    RULE_functionCallArguments = 69
    RULE_functionCall = 70
    RULE_assemblyBlock = 71
    RULE_assemblyItem = 72
    RULE_assemblyExpression = 73
    RULE_assemblyMember = 74
    RULE_assemblyCall = 75
    RULE_assemblyLocalDefinition = 76
    RULE_assemblyAssignment = 77
    RULE_assemblyIdentifierOrList = 78
    RULE_assemblyIdentifierList = 79
    RULE_assemblyStackAssignment = 80
    RULE_labelDefinition = 81
    RULE_assemblySwitch = 82
    RULE_assemblyCase = 83
    RULE_assemblyFunctionDefinition = 84
    RULE_assemblyFunctionReturns = 85
    RULE_assemblyFor = 86
    RULE_assemblyIf = 87
    RULE_assemblyLiteral = 88
    RULE_subAssembly = 89
    RULE_tupleExpression = 90
    RULE_typeNameExpression = 91
    RULE_numberLiteral = 92
    RULE_identifier = 93
    RULE_hexLiteral = 94
    RULE_overrideSpecifier = 95
    RULE_stringLiteral = 96

    ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "importPath", "contractDefinition", 
                   "inheritanceSpecifier", "contractPart", "stateVariableDeclaration", 
                   "fileLevelConstant", "customErrorDefinition", "typeDefinition", 
                   "usingForDeclaration", "structDefinition", "modifierDefinition", 
                   "modifierInvocation", "functionDefinition", "functionDescriptor", 
                   "returnParameters", "modifierList", "eventDefinition", 
                   "enumValue", "enumDefinition", "parameterList", "parameter", 
                   "eventParameterList", "eventParameter", "functionTypeParameterList", 
                   "functionTypeParameter", "variableDeclaration", "typeName", 
                   "userDefinedTypeName", "mappingKey", "mapping", "functionTypeName", 
                   "storageLocation", "stateMutability", "block", "statement", 
                   "expressionStatement", "ifStatement", "tryStatement", 
                   "catchClause", "whileStatement", "simpleStatement", "uncheckedStatement", 
                   "forStatement", "inlineAssemblyStatement", "doWhileStatement", 
                   "continueStatement", "breakStatement", "returnStatement", 
                   "throwStatement", "emitStatement", "revertStatement", 
                   "variableDeclarationStatement", "variableDeclarationList", 
                   "identifierList", "elementaryTypeName", "expression", 
                   "primaryExpression", "expressionList", "nameValueList", 
                   "nameValue", "functionCallArguments", "functionCall", 
                   "assemblyBlock", "assemblyItem", "assemblyExpression", 
                   "assemblyMember", "assemblyCall", "assemblyLocalDefinition", 
                   "assemblyAssignment", "assemblyIdentifierOrList", "assemblyIdentifierList", 
                   "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                   "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                   "assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", 
                   "tupleExpression", "typeNameExpression", "numberLiteral", 
                   "identifier", "hexLiteral", "overrideSpecifier", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    Int=98
    Uint=99
    Byte=100
    Fixed=101
    Ufixed=102
    BooleanLiteral=103
    DecimalNumber=104
    HexNumber=105
    NumberUnit=106
    HexLiteralFragment=107
    ReservedKeyword=108
    AnonymousKeyword=109
    BreakKeyword=110
    ConstantKeyword=111
    ImmutableKeyword=112
    ContinueKeyword=113
    LeaveKeyword=114
    ExternalKeyword=115
    IndexedKeyword=116
    InternalKeyword=117
    PayableKeyword=118
    PrivateKeyword=119
    PublicKeyword=120
    VirtualKeyword=121
    PureKeyword=122
    TypeKeyword=123
    ViewKeyword=124
    ConstructorKeyword=125
    FallbackKeyword=126
    ReceiveKeyword=127
    Identifier=128
    StringLiteralFragment=129
    VersionLiteral=130
    WS=131
    COMMENT=132
    LINE_COMMENT=133

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class SourceUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractDefinitionContext,i)


        def enumDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,i)


        def structDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,i)


        def functionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,i)


        def fileLevelConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FileLevelConstantContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FileLevelConstantContext,i)


        def customErrorDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CustomErrorDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CustomErrorDefinitionContext,i)


        def typeDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.TypeDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.TypeDefinitionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)




    def sourceUnit(self):

        localctx = SolidityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__0) | (1 << SolidityParser.T__11) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__17) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__19) | (1 << SolidityParser.T__20) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.TypeKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.FallbackKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                self.state = 203
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 194
                    self.pragmaDirective()
                    pass

                elif la_ == 2:
                    self.state = 195
                    self.importDirective()
                    pass

                elif la_ == 3:
                    self.state = 196
                    self.contractDefinition()
                    pass

                elif la_ == 4:
                    self.state = 197
                    self.enumDefinition()
                    pass

                elif la_ == 5:
                    self.state = 198
                    self.structDefinition()
                    pass

                elif la_ == 6:
                    self.state = 199
                    self.functionDefinition()
                    pass

                elif la_ == 7:
                    self.state = 200
                    self.fileLevelConstant()
                    pass

                elif la_ == 8:
                    self.state = 201
                    self.customErrorDefinition()
                    pass

                elif la_ == 9:
                    self.state = 202
                    self.typeDefinition()
                    pass


                self.state = 207
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 208
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(SolidityParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(SolidityParser.PragmaValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)




    def pragmaDirective(self):

        localctx = SolidityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self.match(SolidityParser.T__0)
            self.state = 211
            self.pragmaName()
            self.state = 212
            self.pragmaValue()
            self.state = 213
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)




    def pragmaName(self):

        localctx = SolidityParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(SolidityParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)




    def pragmaValue(self):

        localctx = SolidityParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 217
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 218
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)




    def version(self):

        localctx = SolidityParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self.versionConstraint()
            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9))) != 0) or _la==SolidityParser.DecimalNumber or _la==SolidityParser.VersionLiteral:
                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__2:
                    self.state = 222
                    self.match(SolidityParser.T__2)


                self.state = 225
                self.versionConstraint()
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)




    def versionOperator(self):

        localctx = SolidityParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(SolidityParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(SolidityParser.VersionOperatorContext,0)


        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)




    def versionConstraint(self):

        localctx = SolidityParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.state = 241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9))) != 0):
                    self.state = 233
                    self.versionOperator()


                self.state = 236
                self.match(SolidityParser.VersionLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9))) != 0):
                    self.state = 237
                    self.versionOperator()


                self.state = 240
                self.match(SolidityParser.DecimalNumber)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = SolidityParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.identifier()
            self.state = 246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__10:
                self.state = 244
                self.match(SolidityParser.T__10)
                self.state = 245
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importPath(self):
            return self.getTypedRuleContext(SolidityParser.ImportPathContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)




    def importDirective(self):

        localctx = SolidityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 248
                self.match(SolidityParser.T__11)
                self.state = 249
                self.importPath()
                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__10:
                    self.state = 250
                    self.match(SolidityParser.T__10)
                    self.state = 251
                    self.identifier()


                self.state = 254
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 256
                self.match(SolidityParser.T__11)
                self.state = 259
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.T__12]:
                    self.state = 257
                    self.match(SolidityParser.T__12)
                    pass
                elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__41, SolidityParser.T__53, SolidityParser.T__95, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier]:
                    self.state = 258
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__10:
                    self.state = 261
                    self.match(SolidityParser.T__10)
                    self.state = 262
                    self.identifier()


                self.state = 265
                self.match(SolidityParser.T__13)
                self.state = 266
                self.importPath()
                self.state = 267
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 269
                self.match(SolidityParser.T__11)
                self.state = 270
                self.match(SolidityParser.T__14)
                self.state = 271
                self.importDeclaration()
                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 272
                    self.match(SolidityParser.T__15)
                    self.state = 273
                    self.importDeclaration()
                    self.state = 278
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 279
                self.match(SolidityParser.T__16)
                self.state = 280
                self.match(SolidityParser.T__13)
                self.state = 281
                self.importPath()
                self.state = 282
                self.match(SolidityParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportPathContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_importPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportPath" ):
                listener.enterImportPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportPath" ):
                listener.exitImportPath(self)




    def importPath(self):

        localctx = SolidityParser.ImportPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.match(SolidityParser.StringLiteralFragment)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContractDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractPartContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)




    def contractDefinition(self):

        localctx = SolidityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__17:
                self.state = 288
                self.match(SolidityParser.T__17)


            self.state = 291
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__18) | (1 << SolidityParser.T__19) | (1 << SolidityParser.T__20))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 292
            self.identifier()
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__21:
                self.state = 293
                self.match(SolidityParser.T__21)
                self.state = 294
                self.inheritanceSpecifier()
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 295
                    self.match(SolidityParser.T__15)
                    self.state = 296
                    self.inheritanceSpecifier()
                    self.state = 301
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 304
            self.match(SolidityParser.T__14)
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__25) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__31) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.TypeKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.FallbackKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                self.state = 305
                self.contractPart()
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 311
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InheritanceSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)




    def inheritanceSpecifier(self):

        localctx = SolidityParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.userDefinedTypeName()
            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__22:
                self.state = 314
                self.match(SolidityParser.T__22)
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__53 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__62 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteralFragment - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.TypeKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)) | (1 << (SolidityParser.StringLiteralFragment - 96)))) != 0):
                    self.state = 315
                    self.expressionList()


                self.state = 318
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContractPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.UsingForDeclarationContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,0)


        def customErrorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.CustomErrorDefinitionContext,0)


        def typeDefinition(self):
            return self.getTypedRuleContext(SolidityParser.TypeDefinitionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)




    def contractPart(self):

        localctx = SolidityParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_contractPart)
        try:
            self.state = 330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 321
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 322
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 323
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 324
                self.modifierDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 325
                self.functionDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 326
                self.eventDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 327
                self.enumDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 328
                self.customErrorDefinition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 329
                self.typeDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StateVariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ConstantKeyword)
            else:
                return self.getToken(SolidityParser.ConstantKeyword, i)

        def ImmutableKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ImmutableKeyword)
            else:
                return self.getToken(SolidityParser.ImmutableKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)




    def stateVariableDeclaration(self):

        localctx = SolidityParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.typeName(0)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)))) != 0):
                self.state = 339
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.PublicKeyword]:
                    self.state = 333
                    self.match(SolidityParser.PublicKeyword)
                    pass
                elif token in [SolidityParser.InternalKeyword]:
                    self.state = 334
                    self.match(SolidityParser.InternalKeyword)
                    pass
                elif token in [SolidityParser.PrivateKeyword]:
                    self.state = 335
                    self.match(SolidityParser.PrivateKeyword)
                    pass
                elif token in [SolidityParser.ConstantKeyword]:
                    self.state = 336
                    self.match(SolidityParser.ConstantKeyword)
                    pass
                elif token in [SolidityParser.ImmutableKeyword]:
                    self.state = 337
                    self.match(SolidityParser.ImmutableKeyword)
                    pass
                elif token in [SolidityParser.T__96]:
                    self.state = 338
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 344
            self.identifier()
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__9:
                self.state = 345
                self.match(SolidityParser.T__9)
                self.state = 346
                self.expression(0)


            self.state = 349
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FileLevelConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_fileLevelConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileLevelConstant" ):
                listener.enterFileLevelConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileLevelConstant" ):
                listener.exitFileLevelConstant(self)




    def fileLevelConstant(self):

        localctx = SolidityParser.FileLevelConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fileLevelConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.typeName(0)
            self.state = 352
            self.match(SolidityParser.ConstantKeyword)
            self.state = 353
            self.identifier()
            self.state = 354
            self.match(SolidityParser.T__9)
            self.state = 355
            self.expression(0)
            self.state = 356
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CustomErrorDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_customErrorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCustomErrorDefinition" ):
                listener.enterCustomErrorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCustomErrorDefinition" ):
                listener.exitCustomErrorDefinition(self)




    def customErrorDefinition(self):

        localctx = SolidityParser.CustomErrorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_customErrorDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.match(SolidityParser.T__24)
            self.state = 359
            self.identifier()
            self.state = 360
            self.parameterList()
            self.state = 361
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDefinition" ):
                listener.enterTypeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDefinition" ):
                listener.exitTypeDefinition(self)




    def typeDefinition(self):

        localctx = SolidityParser.TypeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(SolidityParser.TypeKeyword)
            self.state = 364
            self.identifier()
            self.state = 365
            self.match(SolidityParser.T__21)
            self.state = 366
            self.elementaryTypeName()
            self.state = 367
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UsingForDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)




    def usingForDeclaration(self):

        localctx = SolidityParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_usingForDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(SolidityParser.T__25)
            self.state = 370
            self.userDefinedTypeName()
            self.state = 371
            self.match(SolidityParser.T__26)
            self.state = 374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__12]:
                self.state = 372
                self.match(SolidityParser.T__12)
                pass
            elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__29, SolidityParser.T__35, SolidityParser.T__37, SolidityParser.T__41, SolidityParser.T__53, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__95, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier]:
                self.state = 373
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 376
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)




    def structDefinition(self):

        localctx = SolidityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.match(SolidityParser.T__27)
            self.state = 379
            self.identifier()
            self.state = 380
            self.match(SolidityParser.T__14)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                self.state = 381
                self.variableDeclaration()
                self.state = 382
                self.match(SolidityParser.T__1)
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                    self.state = 383
                    self.variableDeclaration()
                    self.state = 384
                    self.match(SolidityParser.T__1)
                    self.state = 390
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 393
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)




    def modifierDefinition(self):

        localctx = SolidityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(SolidityParser.T__28)
            self.state = 396
            self.identifier()
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__22:
                self.state = 397
                self.parameterList()


            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__96 or _la==SolidityParser.VirtualKeyword:
                self.state = 402
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.VirtualKeyword]:
                    self.state = 400
                    self.match(SolidityParser.VirtualKeyword)
                    pass
                elif token in [SolidityParser.T__96]:
                    self.state = 401
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 409
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__1]:
                self.state = 407
                self.match(SolidityParser.T__1)
                pass
            elif token in [SolidityParser.T__14]:
                self.state = 408
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)




    def modifierInvocation(self):

        localctx = SolidityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.identifier()
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__22:
                self.state = 412
                self.match(SolidityParser.T__22)
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__53 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__62 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteralFragment - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.TypeKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)) | (1 << (SolidityParser.StringLiteralFragment - 96)))) != 0):
                    self.state = 413
                    self.expressionList()


                self.state = 416
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDescriptor(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDescriptorContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = SolidityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.functionDescriptor()
            self.state = 420
            self.parameterList()
            self.state = 421
            self.modifierList()
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__30:
                self.state = 422
                self.returnParameters()


            self.state = 427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__1]:
                self.state = 425
                self.match(SolidityParser.T__1)
                pass
            elif token in [SolidityParser.T__14]:
                self.state = 426
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDescriptorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def FallbackKeyword(self):
            return self.getToken(SolidityParser.FallbackKeyword, 0)

        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_functionDescriptor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDescriptor" ):
                listener.enterFunctionDescriptor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDescriptor" ):
                listener.exitFunctionDescriptor(self)




    def functionDescriptor(self):

        localctx = SolidityParser.FunctionDescriptorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_functionDescriptor)
        self._la = 0 # Token type
        try:
            self.state = 436
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 429
                self.match(SolidityParser.T__29)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                    self.state = 430
                    self.identifier()


                pass
            elif token in [SolidityParser.ConstructorKeyword]:
                self.enterOuterAlt(localctx, 2)
                self.state = 433
                self.match(SolidityParser.ConstructorKeyword)
                pass
            elif token in [SolidityParser.FallbackKeyword]:
                self.enterOuterAlt(localctx, 3)
                self.state = 434
                self.match(SolidityParser.FallbackKeyword)
                pass
            elif token in [SolidityParser.ReceiveKeyword]:
                self.enterOuterAlt(localctx, 4)
                self.state = 435
                self.match(SolidityParser.ReceiveKeyword)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnParameters" ):
                listener.enterReturnParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnParameters" ):
                listener.exitReturnParameters(self)




    def returnParameters(self):

        localctx = SolidityParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_returnParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(SolidityParser.T__30)
            self.state = 439
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)




    def modifierList(self):

        localctx = SolidityParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_modifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.T__96 - 96)) | (1 << (SolidityParser.ConstantKeyword - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.ExternalKeyword - 96)) | (1 << (SolidityParser.InternalKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.PrivateKeyword - 96)) | (1 << (SolidityParser.PublicKeyword - 96)) | (1 << (SolidityParser.VirtualKeyword - 96)) | (1 << (SolidityParser.PureKeyword - 96)) | (1 << (SolidityParser.ViewKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                self.state = 449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 441
                    self.match(SolidityParser.ExternalKeyword)
                    pass

                elif la_ == 2:
                    self.state = 442
                    self.match(SolidityParser.PublicKeyword)
                    pass

                elif la_ == 3:
                    self.state = 443
                    self.match(SolidityParser.InternalKeyword)
                    pass

                elif la_ == 4:
                    self.state = 444
                    self.match(SolidityParser.PrivateKeyword)
                    pass

                elif la_ == 5:
                    self.state = 445
                    self.match(SolidityParser.VirtualKeyword)
                    pass

                elif la_ == 6:
                    self.state = 446
                    self.stateMutability()
                    pass

                elif la_ == 7:
                    self.state = 447
                    self.modifierInvocation()
                    pass

                elif la_ == 8:
                    self.state = 448
                    self.overrideSpecifier()
                    pass


                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def eventParameterList(self):
            return self.getTypedRuleContext(SolidityParser.EventParameterListContext,0)


        def AnonymousKeyword(self):
            return self.getToken(SolidityParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)




    def eventDefinition(self):

        localctx = SolidityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(SolidityParser.T__31)
            self.state = 455
            self.identifier()
            self.state = 456
            self.eventParameterList()
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.AnonymousKeyword:
                self.state = 457
                self.match(SolidityParser.AnonymousKeyword)


            self.state = 460
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)




    def enumValue(self):

        localctx = SolidityParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)




    def enumDefinition(self):

        localctx = SolidityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.match(SolidityParser.T__32)
            self.state = 465
            self.identifier()
            self.state = 466
            self.match(SolidityParser.T__14)
            self.state = 468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                self.state = 467
                self.enumValue()


            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__15:
                self.state = 470
                self.match(SolidityParser.T__15)
                self.state = 471
                self.enumValue()
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 477
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = SolidityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(SolidityParser.T__22)
            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                self.state = 480
                self.parameter()
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 481
                    self.match(SolidityParser.T__15)
                    self.state = 482
                    self.parameter()
                    self.state = 487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 490
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = SolidityParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.typeName(0)
            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 493
                self.storageLocation()


            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                self.state = 496
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)




    def eventParameterList(self):

        localctx = SolidityParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(SolidityParser.T__22)
            self.state = 508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                self.state = 500
                self.eventParameter()
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 501
                    self.match(SolidityParser.T__15)
                    self.state = 502
                    self.eventParameter()
                    self.state = 507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 510
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def IndexedKeyword(self):
            return self.getToken(SolidityParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)




    def eventParameter(self):

        localctx = SolidityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.typeName(0)
            self.state = 514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.IndexedKeyword:
                self.state = 513
                self.match(SolidityParser.IndexedKeyword)


            self.state = 517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                self.state = 516
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameterList" ):
                listener.enterFunctionTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameterList" ):
                listener.exitFunctionTypeParameterList(self)




    def functionTypeParameterList(self):

        localctx = SolidityParser.FunctionTypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_functionTypeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(SolidityParser.T__22)
            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                self.state = 520
                self.functionTypeParameter()
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 521
                    self.match(SolidityParser.T__15)
                    self.state = 522
                    self.functionTypeParameter()
                    self.state = 527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 530
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameter" ):
                listener.enterFunctionTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameter" ):
                listener.exitFunctionTypeParameter(self)




    def functionTypeParameter(self):

        localctx = SolidityParser.FunctionTypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_functionTypeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self.typeName(0)
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__39) | (1 << SolidityParser.T__40) | (1 << SolidityParser.T__41))) != 0):
                self.state = 533
                self.storageLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = SolidityParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.typeName(0)
            self.state = 538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 537
                self.storageLocation()


            self.state = 540
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(SolidityParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(SolidityParser.FunctionTypeNameContext,0)


        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 543
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 544
                self.userDefinedTypeName()
                pass

            elif la_ == 3:
                self.state = 545
                self.mapping()
                pass

            elif la_ == 4:
                self.state = 546
                self.functionTypeName()
                pass

            elif la_ == 5:
                self.state = 547
                self.match(SolidityParser.T__35)
                self.state = 548
                self.match(SolidityParser.PayableKeyword)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 559
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SolidityParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 551
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 552
                    self.match(SolidityParser.T__33)
                    self.state = 554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__53 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__62 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteralFragment - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.TypeKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)) | (1 << (SolidityParser.StringLiteralFragment - 96)))) != 0):
                        self.state = 553
                        self.expression(0)


                    self.state = 556
                    self.match(SolidityParser.T__34) 
                self.state = 561
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class UserDefinedTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)




    def userDefinedTypeName(self):

        localctx = SolidityParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_userDefinedTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.identifier()
            self.state = 567
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 563
                    self.match(SolidityParser.T__36)
                    self.state = 564
                    self.identifier() 
                self.state = 569
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MappingKeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mappingKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMappingKey" ):
                listener.enterMappingKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMappingKey" ):
                listener.exitMappingKey(self)




    def mappingKey(self):

        localctx = SolidityParser.MappingKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_mappingKey)
        try:
            self.state = 572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__35, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 570
                self.elementaryTypeName()
                pass
            elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__41, SolidityParser.T__53, SolidityParser.T__95, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 571
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MappingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mappingKey(self):
            return self.getTypedRuleContext(SolidityParser.MappingKeyContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)




    def mapping(self):

        localctx = SolidityParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_mapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(SolidityParser.T__37)
            self.state = 575
            self.match(SolidityParser.T__22)
            self.state = 576
            self.mappingKey()
            self.state = 577
            self.match(SolidityParser.T__38)
            self.state = 578
            self.typeName(0)
            self.state = 579
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterListContext,i)


        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)




    def functionTypeName(self):

        localctx = SolidityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_functionTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.match(SolidityParser.T__29)
            self.state = 582
            self.functionTypeParameterList()
            self.state = 588
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 586
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SolidityParser.InternalKeyword]:
                        self.state = 583
                        self.match(SolidityParser.InternalKeyword)
                        pass
                    elif token in [SolidityParser.ExternalKeyword]:
                        self.state = 584
                        self.match(SolidityParser.ExternalKeyword)
                        pass
                    elif token in [SolidityParser.ConstantKeyword, SolidityParser.PayableKeyword, SolidityParser.PureKeyword, SolidityParser.ViewKeyword]:
                        self.state = 585
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 590
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

            self.state = 593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 591
                self.match(SolidityParser.T__30)
                self.state = 592
                self.functionTypeParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StorageLocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_storageLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageLocation" ):
                listener.enterStorageLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageLocation" ):
                listener.exitStorageLocation(self)




    def storageLocation(self):

        localctx = SolidityParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_storageLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__39) | (1 << SolidityParser.T__40) | (1 << SolidityParser.T__41))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StateMutabilityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(SolidityParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(SolidityParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)




    def stateMutability(self):

        localctx = SolidityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            _la = self._input.LA(1)
            if not(((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (SolidityParser.ConstantKeyword - 111)) | (1 << (SolidityParser.PayableKeyword - 111)) | (1 << (SolidityParser.PureKeyword - 111)) | (1 << (SolidityParser.ViewKeyword - 111)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = SolidityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(SolidityParser.T__14)
            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__14 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__26 - 5)) | (1 << (SolidityParser.T__29 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__37 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__42 - 5)) | (1 << (SolidityParser.T__44 - 5)) | (1 << (SolidityParser.T__46 - 5)) | (1 << (SolidityParser.T__47 - 5)) | (1 << (SolidityParser.T__48 - 5)) | (1 << (SolidityParser.T__49 - 5)) | (1 << (SolidityParser.T__50 - 5)) | (1 << (SolidityParser.T__51 - 5)) | (1 << (SolidityParser.T__52 - 5)) | (1 << (SolidityParser.T__53 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__62 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteralFragment - 96)) | (1 << (SolidityParser.BreakKeyword - 96)) | (1 << (SolidityParser.ContinueKeyword - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.TypeKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)) | (1 << (SolidityParser.StringLiteralFragment - 96)))) != 0):
                self.state = 600
                self.statement()
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 606
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(SolidityParser.IfStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(SolidityParser.TryStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SolidityParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SolidityParser.ForStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(SolidityParser.InlineAssemblyStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SolidityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SolidityParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SolidityParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(SolidityParser.ThrowStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(SolidityParser.EmitStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def uncheckedStatement(self):
            return self.getTypedRuleContext(SolidityParser.UncheckedStatementContext,0)


        def revertStatement(self):
            return self.getTypedRuleContext(SolidityParser.RevertStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = SolidityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_statement)
        try:
            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 608
                self.ifStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 609
                self.tryStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 610
                self.whileStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 611
                self.forStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 612
                self.block()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 613
                self.inlineAssemblyStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 614
                self.doWhileStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 615
                self.continueStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 616
                self.breakStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 617
                self.returnStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 618
                self.throwStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 619
                self.emitStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 620
                self.simpleStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 621
                self.uncheckedStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 622
                self.revertStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = SolidityParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.expression(0)
            self.state = 626
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = SolidityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(SolidityParser.T__42)
            self.state = 629
            self.match(SolidityParser.T__22)
            self.state = 630
            self.expression(0)
            self.state = 631
            self.match(SolidityParser.T__23)
            self.state = 632
            self.statement()
            self.state = 635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 633
                self.match(SolidityParser.T__43)
                self.state = 634
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)




    def tryStatement(self):

        localctx = SolidityParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.match(SolidityParser.T__44)
            self.state = 638
            self.expression(0)
            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__30:
                self.state = 639
                self.returnParameters()


            self.state = 642
            self.block()
            self.state = 644 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 643
                self.catchClause()
                self.state = 646 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SolidityParser.T__45):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = SolidityParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.match(SolidityParser.T__45)
            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__22) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                    self.state = 649
                    self.identifier()


                self.state = 652
                self.parameterList()


            self.state = 655
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = SolidityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(SolidityParser.T__46)
            self.state = 658
            self.match(SolidityParser.T__22)
            self.state = 659
            self.expression(0)
            self.state = 660
            self.match(SolidityParser.T__23)
            self.state = 661
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)




    def simpleStatement(self):

        localctx = SolidityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 663
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 664
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UncheckedStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_uncheckedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedStatement" ):
                listener.enterUncheckedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedStatement" ):
                listener.exitUncheckedStatement(self)




    def uncheckedStatement(self):

        localctx = SolidityParser.UncheckedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_uncheckedStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(SolidityParser.T__47)
            self.state = 668
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = SolidityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(SolidityParser.T__26)
            self.state = 671
            self.match(SolidityParser.T__22)
            self.state = 674
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__4, SolidityParser.T__13, SolidityParser.T__22, SolidityParser.T__24, SolidityParser.T__29, SolidityParser.T__33, SolidityParser.T__35, SolidityParser.T__37, SolidityParser.T__41, SolidityParser.T__53, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__58, SolidityParser.T__59, SolidityParser.T__60, SolidityParser.T__62, SolidityParser.T__63, SolidityParser.T__64, SolidityParser.T__65, SolidityParser.T__66, SolidityParser.T__95, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.TypeKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.state = 672
                self.simpleStatement()
                pass
            elif token in [SolidityParser.T__1]:
                self.state = 673
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 678
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__4, SolidityParser.T__13, SolidityParser.T__22, SolidityParser.T__24, SolidityParser.T__33, SolidityParser.T__35, SolidityParser.T__41, SolidityParser.T__53, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__58, SolidityParser.T__59, SolidityParser.T__60, SolidityParser.T__62, SolidityParser.T__63, SolidityParser.T__64, SolidityParser.T__65, SolidityParser.T__66, SolidityParser.T__95, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.TypeKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.state = 676
                self.expressionStatement()
                pass
            elif token in [SolidityParser.T__1]:
                self.state = 677
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__53 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__62 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteralFragment - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.TypeKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)) | (1 << (SolidityParser.StringLiteralFragment - 96)))) != 0):
                self.state = 680
                self.expression(0)


            self.state = 683
            self.match(SolidityParser.T__23)
            self.state = 684
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InlineAssemblyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatement" ):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatement" ):
                listener.exitInlineAssemblyStatement(self)




    def inlineAssemblyStatement(self):

        localctx = SolidityParser.InlineAssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_inlineAssemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(SolidityParser.T__48)
            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.StringLiteralFragment:
                self.state = 687
                self.match(SolidityParser.StringLiteralFragment)


            self.state = 690
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoWhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = SolidityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(SolidityParser.T__49)
            self.state = 693
            self.statement()
            self.state = 694
            self.match(SolidityParser.T__46)
            self.state = 695
            self.match(SolidityParser.T__22)
            self.state = 696
            self.expression(0)
            self.state = 697
            self.match(SolidityParser.T__23)
            self.state = 698
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContinueStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = SolidityParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(SolidityParser.ContinueKeyword)
            self.state = 701
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = SolidityParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(SolidityParser.BreakKeyword)
            self.state = 704
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = SolidityParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(SolidityParser.T__50)
            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__53 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__62 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteralFragment - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.TypeKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)) | (1 << (SolidityParser.StringLiteralFragment - 96)))) != 0):
                self.state = 707
                self.expression(0)


            self.state = 710
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThrowStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = SolidityParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(SolidityParser.T__51)
            self.state = 713
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)




    def emitStatement(self):

        localctx = SolidityParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(SolidityParser.T__52)
            self.state = 716
            self.functionCall()
            self.state = 717
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RevertStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_revertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevertStatement" ):
                listener.enterRevertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevertStatement" ):
                listener.exitRevertStatement(self)




    def revertStatement(self):

        localctx = SolidityParser.RevertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_revertStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(SolidityParser.T__53)
            self.state = 720
            self.functionCall()
            self.state = 721
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierListContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationListContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)




    def variableDeclarationStatement(self):

        localctx = SolidityParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 723
                self.match(SolidityParser.T__54)
                self.state = 724
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 725
                self.variableDeclaration()
                pass

            elif la_ == 3:
                self.state = 726
                self.match(SolidityParser.T__22)
                self.state = 727
                self.variableDeclarationList()
                self.state = 728
                self.match(SolidityParser.T__23)
                pass


            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__9:
                self.state = 732
                self.match(SolidityParser.T__9)
                self.state = 733
                self.expression(0)


            self.state = 736
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)




    def variableDeclarationList(self):

        localctx = SolidityParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                self.state = 738
                self.variableDeclaration()


            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__15:
                self.state = 741
                self.match(SolidityParser.T__15)
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                    self.state = 742
                    self.variableDeclaration()


                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = SolidityParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(SolidityParser.T__22)
            self.state = 757
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 752
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                        self.state = 751
                        self.identifier()


                    self.state = 754
                    self.match(SolidityParser.T__15) 
                self.state = 759
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                self.state = 760
                self.identifier()


            self.state = 763
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementaryTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(SolidityParser.Int, 0)

        def Uint(self):
            return self.getToken(SolidityParser.Uint, 0)

        def Byte(self):
            return self.getToken(SolidityParser.Byte, 0)

        def Fixed(self):
            return self.getToken(SolidityParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(SolidityParser.Ufixed, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)




    def elementaryTypeName(self):

        localctx = SolidityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__35) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57))) != 0) or ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & ((1 << (SolidityParser.Int - 98)) | (1 << (SolidityParser.Uint - 98)) | (1 << (SolidityParser.Byte - 98)) | (1 << (SolidityParser.Fixed - 98)) | (1 << (SolidityParser.Ufixed - 98)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(SolidityParser.PrimaryExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 768
                self.match(SolidityParser.T__60)
                self.state = 769
                self.typeName(0)
                pass

            elif la_ == 2:
                self.state = 770
                self.match(SolidityParser.T__22)
                self.state = 771
                self.expression(0)
                self.state = 772
                self.match(SolidityParser.T__23)
                pass

            elif la_ == 3:
                self.state = 774
                _la = self._input.LA(1)
                if not(_la==SolidityParser.T__58 or _la==SolidityParser.T__59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 775
                self.expression(19)
                pass

            elif la_ == 4:
                self.state = 776
                _la = self._input.LA(1)
                if not(_la==SolidityParser.T__62 or _la==SolidityParser.T__63):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 777
                self.expression(18)
                pass

            elif la_ == 5:
                self.state = 778
                _la = self._input.LA(1)
                if not(_la==SolidityParser.T__64 or _la==SolidityParser.T__65):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 779
                self.expression(17)
                pass

            elif la_ == 6:
                self.state = 780
                self.match(SolidityParser.T__66)
                self.state = 781
                self.expression(16)
                pass

            elif la_ == 7:
                self.state = 782
                self.match(SolidityParser.T__4)
                self.state = 783
                self.expression(15)
                pass

            elif la_ == 8:
                self.state = 784
                self.primaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 861
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 859
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                    if la_ == 1:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 787
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 788
                        self.match(SolidityParser.T__67)
                        self.state = 789
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 790
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 791
                        _la = self._input.LA(1)
                        if not(((((_la - 13)) & ~0x3f) == 0 and ((1 << (_la - 13)) & ((1 << (SolidityParser.T__12 - 13)) | (1 << (SolidityParser.T__68 - 13)) | (1 << (SolidityParser.T__69 - 13)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 792
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 793
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 794
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__62 or _la==SolidityParser.T__63):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 795
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 796
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 797
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__70 or _la==SolidityParser.T__71):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 798
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 799
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 800
                        self.match(SolidityParser.T__72)
                        self.state = 801
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 802
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 803
                        self.match(SolidityParser.T__3)
                        self.state = 804
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 805
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 806
                        self.match(SolidityParser.T__73)
                        self.state = 807
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 808
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 809
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 810
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 811
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 812
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__74 or _la==SolidityParser.T__75):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 813
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 814
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 815
                        self.match(SolidityParser.T__76)
                        self.state = 816
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 817
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 818
                        self.match(SolidityParser.T__2)
                        self.state = 819
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 820
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 821
                        self.match(SolidityParser.T__77)
                        self.state = 822
                        self.expression(0)
                        self.state = 823
                        self.match(SolidityParser.T__61)
                        self.state = 824
                        self.expression(4)
                        pass

                    elif la_ == 13:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 826
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 827
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__9 or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (SolidityParser.T__78 - 79)) | (1 << (SolidityParser.T__79 - 79)) | (1 << (SolidityParser.T__80 - 79)) | (1 << (SolidityParser.T__81 - 79)) | (1 << (SolidityParser.T__82 - 79)) | (1 << (SolidityParser.T__83 - 79)) | (1 << (SolidityParser.T__84 - 79)) | (1 << (SolidityParser.T__85 - 79)) | (1 << (SolidityParser.T__86 - 79)) | (1 << (SolidityParser.T__87 - 79)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 828
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 829
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 830
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__58 or _la==SolidityParser.T__59):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 15:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 831
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 832
                        self.match(SolidityParser.T__33)
                        self.state = 833
                        self.expression(0)
                        self.state = 834
                        self.match(SolidityParser.T__34)
                        pass

                    elif la_ == 16:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 836
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 837
                        self.match(SolidityParser.T__33)
                        self.state = 839
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__53 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__62 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteralFragment - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.TypeKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)) | (1 << (SolidityParser.StringLiteralFragment - 96)))) != 0):
                            self.state = 838
                            self.expression(0)


                        self.state = 841
                        self.match(SolidityParser.T__61)
                        self.state = 843
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__53 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__62 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteralFragment - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.TypeKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)) | (1 << (SolidityParser.StringLiteralFragment - 96)))) != 0):
                            self.state = 842
                            self.expression(0)


                        self.state = 845
                        self.match(SolidityParser.T__34)
                        pass

                    elif la_ == 17:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 846
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 847
                        self.match(SolidityParser.T__36)
                        self.state = 848
                        self.identifier()
                        pass

                    elif la_ == 18:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 849
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 850
                        self.match(SolidityParser.T__14)
                        self.state = 851
                        self.nameValueList()
                        self.state = 852
                        self.match(SolidityParser.T__16)
                        pass

                    elif la_ == 19:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 854
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 855
                        self.match(SolidityParser.T__22)
                        self.state = 856
                        self.functionCallArguments()
                        self.state = 857
                        self.match(SolidityParser.T__23)
                        pass

             
                self.state = 863
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(SolidityParser.BooleanLiteral, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def tupleExpression(self):
            return self.getTypedRuleContext(SolidityParser.TupleExpressionContext,0)


        def typeNameExpression(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = SolidityParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_primaryExpression)
        try:
            self.state = 881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 864
                self.match(SolidityParser.BooleanLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 865
                self.numberLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 866
                self.hexLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 867
                self.stringLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 868
                self.identifier()
                self.state = 871
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 869
                    self.match(SolidityParser.T__33)
                    self.state = 870
                    self.match(SolidityParser.T__34)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 873
                self.match(SolidityParser.TypeKeyword)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 874
                self.match(SolidityParser.PayableKeyword)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 875
                self.tupleExpression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 876
                self.typeNameExpression()
                self.state = 879
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 877
                    self.match(SolidityParser.T__33)
                    self.state = 878
                    self.match(SolidityParser.T__34)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = SolidityParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.expression(0)
            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__15:
                self.state = 884
                self.match(SolidityParser.T__15)
                self.state = 885
                self.expression(0)
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameValueListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NameValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NameValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValueList" ):
                listener.enterNameValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValueList" ):
                listener.exitNameValueList(self)




    def nameValueList(self):

        localctx = SolidityParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_nameValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.nameValue()
            self.state = 896
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 892
                    self.match(SolidityParser.T__15)
                    self.state = 893
                    self.nameValue() 
                self.state = 898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__15:
                self.state = 899
                self.match(SolidityParser.T__15)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValue" ):
                listener.enterNameValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValue" ):
                listener.exitNameValue(self)




    def nameValue(self):

        localctx = SolidityParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_nameValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.identifier()
            self.state = 903
            self.match(SolidityParser.T__61)
            self.state = 904
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)




    def functionCallArguments(self):

        localctx = SolidityParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 914
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 906
                self.match(SolidityParser.T__14)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                    self.state = 907
                    self.nameValueList()


                self.state = 910
                self.match(SolidityParser.T__16)
                pass
            elif token in [SolidityParser.T__4, SolidityParser.T__13, SolidityParser.T__22, SolidityParser.T__23, SolidityParser.T__24, SolidityParser.T__33, SolidityParser.T__35, SolidityParser.T__41, SolidityParser.T__53, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__58, SolidityParser.T__59, SolidityParser.T__60, SolidityParser.T__62, SolidityParser.T__63, SolidityParser.T__64, SolidityParser.T__65, SolidityParser.T__66, SolidityParser.T__95, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.TypeKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.enterOuterAlt(localctx, 2)
                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__53 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__62 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteralFragment - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.TypeKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)) | (1 << (SolidityParser.StringLiteralFragment - 96)))) != 0):
                    self.state = 911
                    self.expressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = SolidityParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.expression(0)
            self.state = 917
            self.match(SolidityParser.T__22)
            self.state = 918
            self.functionCallArguments()
            self.state = 919
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyItemContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyBlock" ):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyBlock" ):
                listener.exitAssemblyBlock(self)




    def assemblyBlock(self):

        localctx = SolidityParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_assemblyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.match(SolidityParser.T__14)
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__14) | (1 << SolidityParser.T__22) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__26) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__42) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__57))) != 0) or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (SolidityParser.T__88 - 89)) | (1 << (SolidityParser.T__90 - 89)) | (1 << (SolidityParser.T__91 - 89)) | (1 << (SolidityParser.T__95 - 89)) | (1 << (SolidityParser.DecimalNumber - 89)) | (1 << (SolidityParser.HexNumber - 89)) | (1 << (SolidityParser.HexLiteralFragment - 89)) | (1 << (SolidityParser.BreakKeyword - 89)) | (1 << (SolidityParser.ContinueKeyword - 89)) | (1 << (SolidityParser.LeaveKeyword - 89)) | (1 << (SolidityParser.PayableKeyword - 89)) | (1 << (SolidityParser.ConstructorKeyword - 89)) | (1 << (SolidityParser.ReceiveKeyword - 89)) | (1 << (SolidityParser.Identifier - 89)) | (1 << (SolidityParser.StringLiteralFragment - 89)))) != 0):
                self.state = 922
                self.assemblyItem()
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 928
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLocalDefinitionContext,0)


        def assemblyAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyAssignmentContext,0)


        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyStackAssignmentContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(SolidityParser.LabelDefinitionContext,0)


        def assemblySwitch(self):
            return self.getTypedRuleContext(SolidityParser.AssemblySwitchContext,0)


        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionDefinitionContext,0)


        def assemblyFor(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyForContext,0)


        def assemblyIf(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIfContext,0)


        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def subAssembly(self):
            return self.getTypedRuleContext(SolidityParser.SubAssemblyContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyItem" ):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyItem" ):
                listener.exitAssemblyItem(self)




    def assemblyItem(self):

        localctx = SolidityParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_assemblyItem)
        try:
            self.state = 948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 930
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 931
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 932
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 933
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 934
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 935
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 936
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 937
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 938
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 939
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 940
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 941
                self.match(SolidityParser.BreakKeyword)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 942
                self.match(SolidityParser.ContinueKeyword)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 943
                self.match(SolidityParser.LeaveKeyword)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 944
                self.subAssembly()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 945
                self.numberLiteral()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 946
                self.stringLiteral()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 947
                self.hexLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyCallContext,0)


        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def assemblyMember(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyMemberContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyExpression" ):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyExpression" ):
                listener.exitAssemblyExpression(self)




    def assemblyExpression(self):

        localctx = SolidityParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_assemblyExpression)
        try:
            self.state = 953
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 950
                self.assemblyCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 951
                self.assemblyLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 952
                self.assemblyMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyMemberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyMember" ):
                listener.enterAssemblyMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyMember" ):
                listener.exitAssemblyMember(self)




    def assemblyMember(self):

        localctx = SolidityParser.AssemblyMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_assemblyMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.identifier()
            self.state = 956
            self.match(SolidityParser.T__36)
            self.state = 957
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCall" ):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCall" ):
                listener.exitAssemblyCall(self)




    def assemblyCall(self):

        localctx = SolidityParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_assemblyCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__50]:
                self.state = 959
                self.match(SolidityParser.T__50)
                pass
            elif token in [SolidityParser.T__35]:
                self.state = 960
                self.match(SolidityParser.T__35)
                pass
            elif token in [SolidityParser.T__57]:
                self.state = 961
                self.match(SolidityParser.T__57)
                pass
            elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__41, SolidityParser.T__53, SolidityParser.T__95, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier]:
                self.state = 962
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 965
                self.match(SolidityParser.T__22)
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__57))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteralFragment - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)) | (1 << (SolidityParser.StringLiteralFragment - 96)))) != 0):
                    self.state = 966
                    self.assemblyExpression()


                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 969
                    self.match(SolidityParser.T__15)
                    self.state = 970
                    self.assemblyExpression()
                    self.state = 975
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 976
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyLocalDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLocalDefinition" ):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLocalDefinition" ):
                listener.exitAssemblyLocalDefinition(self)




    def assemblyLocalDefinition(self):

        localctx = SolidityParser.AssemblyLocalDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_assemblyLocalDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(SolidityParser.T__88)
            self.state = 980
            self.assemblyIdentifierOrList()
            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__89:
                self.state = 981
                self.match(SolidityParser.T__89)
                self.state = 982
                self.assemblyExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyAssignment" ):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyAssignment" ):
                listener.exitAssemblyAssignment(self)




    def assemblyAssignment(self):

        localctx = SolidityParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.assemblyIdentifierOrList()
            self.state = 986
            self.match(SolidityParser.T__89)
            self.state = 987
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyIdentifierOrListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyMember(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyMemberContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierOrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierOrList" ):
                listener.enterAssemblyIdentifierOrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierOrList" ):
                listener.exitAssemblyIdentifierOrList(self)




    def assemblyIdentifierOrList(self):

        localctx = SolidityParser.AssemblyIdentifierOrListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_assemblyIdentifierOrList)
        try:
            self.state = 995
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 989
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 990
                self.assemblyMember()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 991
                self.match(SolidityParser.T__22)
                self.state = 992
                self.assemblyIdentifierList()
                self.state = 993
                self.match(SolidityParser.T__23)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyIdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierList" ):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierList" ):
                listener.exitAssemblyIdentifierList(self)




    def assemblyIdentifierList(self):

        localctx = SolidityParser.AssemblyIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assemblyIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.identifier()
            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__15:
                self.state = 998
                self.match(SolidityParser.T__15)
                self.state = 999
                self.identifier()
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyStackAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyStackAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStackAssignment" ):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStackAssignment" ):
                listener.exitAssemblyStackAssignment(self)




    def assemblyStackAssignment(self):

        localctx = SolidityParser.AssemblyStackAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_assemblyStackAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(SolidityParser.T__90)
            self.state = 1006
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)




    def labelDefinition(self):

        localctx = SolidityParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.identifier()
            self.state = 1009
            self.match(SolidityParser.T__61)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblySwitchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyCaseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblySwitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblySwitch" ):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblySwitch" ):
                listener.exitAssemblySwitch(self)




    def assemblySwitch(self):

        localctx = SolidityParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_assemblySwitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(SolidityParser.T__91)
            self.state = 1012
            self.assemblyExpression()
            self.state = 1016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__92 or _la==SolidityParser.T__93:
                self.state = 1013
                self.assemblyCase()
                self.state = 1018
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyCaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCase" ):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCase" ):
                listener.exitAssemblyCase(self)




    def assemblyCase(self):

        localctx = SolidityParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_assemblyCase)
        try:
            self.state = 1025
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1019
                self.match(SolidityParser.T__92)
                self.state = 1020
                self.assemblyLiteral()
                self.state = 1021
                self.assemblyBlock()
                pass
            elif token in [SolidityParser.T__93]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1023
                self.match(SolidityParser.T__93)
                self.state = 1024
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyFunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionReturnsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionDefinition" ):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionDefinition" ):
                listener.exitAssemblyFunctionDefinition(self)




    def assemblyFunctionDefinition(self):

        localctx = SolidityParser.AssemblyFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_assemblyFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.match(SolidityParser.T__29)
            self.state = 1028
            self.identifier()
            self.state = 1029
            self.match(SolidityParser.T__22)
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0):
                self.state = 1030
                self.assemblyIdentifierList()


            self.state = 1033
            self.match(SolidityParser.T__23)
            self.state = 1035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__94:
                self.state = 1034
                self.assemblyFunctionReturns()


            self.state = 1037
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyFunctionReturnsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionReturns" ):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionReturns" ):
                listener.exitAssemblyFunctionReturns(self)




    def assemblyFunctionReturns(self):

        localctx = SolidityParser.AssemblyFunctionReturnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_assemblyFunctionReturns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(SolidityParser.T__94)
            self.state = 1040
            self.assemblyIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyForContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def assemblyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFor" ):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFor" ):
                listener.exitAssemblyFor(self)




    def assemblyFor(self):

        localctx = SolidityParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_assemblyFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.match(SolidityParser.T__26)
            self.state = 1045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__14]:
                self.state = 1043
                self.assemblyBlock()
                pass
            elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__35, SolidityParser.T__41, SolidityParser.T__50, SolidityParser.T__53, SolidityParser.T__57, SolidityParser.T__95, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.state = 1044
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1047
            self.assemblyExpression()
            self.state = 1050
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__14]:
                self.state = 1048
                self.assemblyBlock()
                pass
            elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__35, SolidityParser.T__41, SolidityParser.T__50, SolidityParser.T__53, SolidityParser.T__57, SolidityParser.T__95, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.state = 1049
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1052
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIf" ):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIf" ):
                listener.exitAssemblyIf(self)




    def assemblyIf(self):

        localctx = SolidityParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_assemblyIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.match(SolidityParser.T__42)
            self.state = 1055
            self.assemblyExpression()
            self.state = 1056
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLiteral" ):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLiteral" ):
                listener.exitAssemblyLiteral(self)




    def assemblyLiteral(self):

        localctx = SolidityParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_assemblyLiteral)
        try:
            self.state = 1062
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.StringLiteralFragment]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1058
                self.stringLiteral()
                pass
            elif token in [SolidityParser.DecimalNumber]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1059
                self.match(SolidityParser.DecimalNumber)
                pass
            elif token in [SolidityParser.HexNumber]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1060
                self.match(SolidityParser.HexNumber)
                pass
            elif token in [SolidityParser.HexLiteralFragment]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1061
                self.hexLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubAssemblyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_subAssembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubAssembly" ):
                listener.enterSubAssembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubAssembly" ):
                listener.exitSubAssembly(self)




    def subAssembly(self):

        localctx = SolidityParser.SubAssemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_subAssembly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.match(SolidityParser.T__48)
            self.state = 1065
            self.identifier()
            self.state = 1066
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)




    def tupleExpression(self):

        localctx = SolidityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.state = 1094
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1068
                self.match(SolidityParser.T__22)

                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__53 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__62 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteralFragment - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.TypeKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)) | (1 << (SolidityParser.StringLiteralFragment - 96)))) != 0):
                    self.state = 1069
                    self.expression(0)


                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 1072
                    self.match(SolidityParser.T__15)
                    self.state = 1074
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__53 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__62 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteralFragment - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.TypeKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)) | (1 << (SolidityParser.StringLiteralFragment - 96)))) != 0):
                        self.state = 1073
                        self.expression(0)


                    self.state = 1080
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1081
                self.match(SolidityParser.T__23)
                pass
            elif token in [SolidityParser.T__33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1082
                self.match(SolidityParser.T__33)
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__53 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__62 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteralFragment - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.TypeKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)) | (1 << (SolidityParser.StringLiteralFragment - 96)))) != 0):
                    self.state = 1083
                    self.expression(0)
                    self.state = 1088
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SolidityParser.T__15:
                        self.state = 1084
                        self.match(SolidityParser.T__15)
                        self.state = 1085
                        self.expression(0)
                        self.state = 1090
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1093
                self.match(SolidityParser.T__34)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExpression" ):
                listener.enterTypeNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExpression" ):
                listener.exitTypeNameExpression(self)




    def typeNameExpression(self):

        localctx = SolidityParser.TypeNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_typeNameExpression)
        try:
            self.state = 1098
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__35, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1096
                self.elementaryTypeName()
                pass
            elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__41, SolidityParser.T__53, SolidityParser.T__95, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1097
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(SolidityParser.NumberUnit, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)




    def numberLiteral(self):

        localctx = SolidityParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            _la = self._input.LA(1)
            if not(_la==SolidityParser.DecimalNumber or _la==SolidityParser.HexNumber):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 1101
                self.match(SolidityParser.NumberUnit)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def Identifier(self):
            return self.getToken(SolidityParser.Identifier, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = SolidityParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__53))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.LeaveKeyword - 96)) | (1 << (SolidityParser.PayableKeyword - 96)) | (1 << (SolidityParser.ConstructorKeyword - 96)) | (1 << (SolidityParser.ReceiveKeyword - 96)) | (1 << (SolidityParser.Identifier - 96)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HexLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.HexLiteralFragment)
            else:
                return self.getToken(SolidityParser.HexLiteralFragment, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_hexLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexLiteral" ):
                listener.enterHexLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexLiteral" ):
                listener.exitHexLiteral(self)




    def hexLiteral(self):

        localctx = SolidityParser.HexLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_hexLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1106
                    self.match(SolidityParser.HexLiteralFragment)

                else:
                    raise NoViableAltException(self)
                self.state = 1109 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OverrideSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UserDefinedTypeNameContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_overrideSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverrideSpecifier" ):
                listener.enterOverrideSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverrideSpecifier" ):
                listener.exitOverrideSpecifier(self)




    def overrideSpecifier(self):

        localctx = SolidityParser.OverrideSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_overrideSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self.match(SolidityParser.T__96)
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__22:
                self.state = 1112
                self.match(SolidityParser.T__22)
                self.state = 1113
                self.userDefinedTypeName()
                self.state = 1118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 1114
                    self.match(SolidityParser.T__15)
                    self.state = 1115
                    self.userDefinedTypeName()
                    self.state = 1120
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1121
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.StringLiteralFragment)
            else:
                return self.getToken(SolidityParser.StringLiteralFragment, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = SolidityParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1125
                    self.match(SolidityParser.StringLiteralFragment)

                else:
                    raise NoViableAltException(self)
                self.state = 1128 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[35] = self.typeName_sempred
        self._predicates[64] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 21)
         




